/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,13],$V2=[1,31],$V3=[1,32],$V4=[1,26],$V5=[1,27],$V6=[1,28],$V7=[1,29],$V8=[1,30],$V9=[1,35],$Va=[2,5,14,24,47,48,77,78,79,80,81],$Vb=[1,38],$Vc=[1,39],$Vd=[1,40],$Ve=[2,5,14,16,23,24,47,48,77,78,79,80,81],$Vf=[14,15,16,29],$Vg=[1,67],$Vh=[1,53],$Vi=[1,51],$Vj=[1,50],$Vk=[1,52],$Vl=[1,54],$Vm=[1,55],$Vn=[1,56],$Vo=[1,57],$Vp=[1,58],$Vq=[1,59],$Vr=[1,60],$Vs=[1,61],$Vt=[1,62],$Vu=[1,63],$Vv=[1,64],$Vw=[1,65],$Vx=[1,66],$Vy=[7,26,28],$Vz=[1,94],$VA=[1,95],$VB=[1,80],$VC=[1,81],$VD=[1,82],$VE=[1,83],$VF=[1,84],$VG=[1,85],$VH=[1,86],$VI=[1,87],$VJ=[1,88],$VK=[1,89],$VL=[1,90],$VM=[1,91],$VN=[1,92],$VO=[1,93],$VP=[7,16,28,30,45,46,49,50,51,52,53,54,55,56,57,58,59,60,61,62],$VQ=[7,16,28,30,49,50,51,52,53,54,55,56,57,58,59,60,61,62],$VR=[7,16,28,30,61,62],$VS=[7,16,28,30,49,50,55,56,57,58,59,60,61,62],$VT=[7,16,28,30,49,50,51,52,54,55,56,57,58,59,60,61,62],$VU=[7,16,28,30,55,56,57,58,59,60,61,62],$VV=[1,158],$VW=[16,28,30],$VX=[1,175],$VY=[2,14,16,23,47,48,77,78,79,80,81];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"ENTRADAS":4,"EOF":5,"ENTRADA":6,"puntoYcoma":7,"FUNCION":8,"METODO":9,"RUN":10,"DECLARACION_VAR":11,"DECLARACION_VECT":12,"INSTRUCCION":13,"identificador":14,"parentesisAbre":15,"parentesisCierra":16,"dosPuntos":17,"TIPO":18,"INSTRUCCIONES":19,"LISTAPARAMETROS":20,"void":21,"llaveAbre":22,"llaveCierra":23,"run":24,"LISTA_VARIABLES":25,"igual":26,"EXPRESION":27,"coma":28,"corcheteAbre":29,"corcheteCierra":30,"new":31,"LISTA_VALORES":32,"VALOR":33,"FOR":34,"WHILE":35,"DO_WHILE":36,"IF":37,"SWITCH":38,"ASIGNACION":39,"INCREMENTO":40,"DECREMENTO":41,"LLAMADA":42,"PRINT":43,"PRINTLN":44,"incremento":45,"decremento":46,"print":47,"println":48,"mas":49,"menos":50,"multiplicacion":51,"division":52,"exponente":53,"modulo":54,"igualacion":55,"diferenciacion":56,"menorQue":57,"mayorQue":58,"mayorIgualQue":59,"menorIgualQue":60,"or":61,"and":62,"not":63,"toLower":64,"toUpper":65,"round":66,"length":67,"TypeOf":68,"to_String":69,"toCharArray":70,"cadena":71,"entero":72,"decimal":73,"caracter":74,"true":75,"false":76,"int":77,"double":78,"boolean":79,"char":80,"string":81,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"puntoYcoma",14:"identificador",15:"parentesisAbre",16:"parentesisCierra",17:"dosPuntos",20:"LISTAPARAMETROS",21:"void",22:"llaveAbre",23:"llaveCierra",24:"run",26:"igual",28:"coma",29:"corcheteAbre",30:"corcheteCierra",31:"new",45:"incremento",46:"decremento",47:"print",48:"println",49:"mas",50:"menos",51:"multiplicacion",52:"division",53:"exponente",54:"modulo",55:"igualacion",56:"diferenciacion",57:"menorQue",58:"mayorQue",59:"mayorIgualQue",60:"menorIgualQue",61:"or",62:"and",63:"not",64:"toLower",65:"toUpper",66:"round",67:"length",68:"TypeOf",69:"to_String",70:"toCharArray",71:"cadena",72:"entero",73:"decimal",74:"caracter",75:"true",76:"false",77:"int",78:"double",79:"boolean",80:"char",81:"string"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[4,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[8,7],[8,8],[8,8],[8,9],[9,7],[9,8],[9,8],[9,9],[10,5],[10,6],[11,3],[11,5],[25,3],[25,1],[12,11],[12,16],[12,9],[32,3],[32,1],[19,2],[19,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,2],[34,0],[35,0],[36,0],[37,0],[38,0],[39,4],[40,3],[41,3],[42,0],[43,5],[44,5],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[27,5],[27,4],[27,4],[27,4],[27,4],[27,4],[27,4],[27,4],[27,4],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,2],[27,2],[27,2],[33,1],[18,1],[18,1],[18,1],[18,1],[18,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 return ""; 
break;
case 3:
  if($$[$0]!=="") $$[$0-1].push($$[$0]); this.$=$$[$0-1]; 
break;
case 4:
 if(this.$!=="") this.$=[$$[$0]]; else this.$=[]; 
break;
case 5:
 console.error('Este es un error sintáctico'); let retorno = {value: null, type: Tipo.ERROR}; return retorno;
break;
case 11: case 40:
 this.$ = $$[$0]; 
break;
case 22:
 this.$ = new Declaracion_Var($$[$0-1], null, $$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 23:
 this.$ = new Declaracion_Var($$[$0-3], $$[$0-1], $$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 24:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 25:
 this.$ = [$$[$0]]; 
break;
case 44:
this.$ = $$[$0];
break;
case 46: case 93:

                        console.log("Error sintáctico en la línea: "+(yylineno + 1));
                        var consola = Consola.getInstance();
                        const error = new Excepcion("Error sintáctico", "El caracter "+ (this.terminals_[symbol] || symbol)+" no se esperaba en esta posición.", this._$.first_line, this._$.first_column+1);
                        consola.set_Error(error);
        
break;
case 52:
 this.$ = new Asignacion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 56:
 this.$ = new Print($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 57:
 this.$ = new Println($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 58:
 this.$ = new Suma($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 59:
 this.$ = new Resta($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 60:
 this.$ = new Multiplicacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 61:
 this.$ = new Division($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 62:
 this.$ = new Potencia($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 63:
 this.$ = new Modulo($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 64:
 this.$ = new Negado($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 65:
 this.$ = $$[$0-1];
break;
case 66:
 this.$ = new Igualacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 67:
 this.$ = new Diferenciacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 68:
 this.$ = new Menor_Que($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 69:
 this.$ = new Mayor_Que($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 70:
 this.$ = new Mayor_Igual_Que($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 71:
 this.$ = new Menor_Igual_Que($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 72:
 this.$ = new Or($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 73:
 this.$ = new And($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 74:
 this.$ = new Not($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 76:
 this.$ = new Casteo($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 82:
 this.$ = new ToString($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 84:
 this.$ = new Literal($$[$0], Tipo.STRING, _$[$0].first_line, _$[$0].first_column); 
break;
case 85:
 this.$ = new Literal($$[$0], Tipo.INT, _$[$0].first_line, _$[$0].first_column); 
break;
case 86:
 this.$ = new Literal($$[$0], Tipo.DOUBLE, _$[$0].first_line, _$[$0].first_column); 
break;
case 87:
 this.$ = new Literal($$[$0], Tipo.CHAR, _$[$0].first_line, _$[$0].first_column); 
break;
case 88: case 89:
 this.$ = new Literal($$[$0], Tipo.BOOLEAN, _$[$0].first_line, _$[$0].first_column); 
break;
case 90:
 this.$ = new Identificador($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 91:
 this.$ = new Incremento_Exp($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 92:
 this.$ = new Decremento_Exp($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 95:
 this.$ = Tipo.INT;
break;
case 96:
 this.$ = Tipo.DOUBLE; 
break;
case 97:
 this.$ = Tipo.BOOLEAN; 
break;
case 98:
 this.$ = Tipo.CHAR; 
break;
case 99:
 this.$ = Tipo.STRING; 
break;
}
},
table: [{2:[1,5],3:1,4:2,5:[1,3],6:4,8:6,9:7,10:8,11:9,12:10,13:11,14:$V0,18:14,24:$V1,34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,47:$V2,48:$V3,77:$V4,78:$V5,79:$V6,80:$V7,81:$V8},{1:[3]},{2:$V9,5:[1,33],6:34,8:6,9:7,10:8,11:9,12:10,13:11,14:$V0,18:14,24:$V1,34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,47:$V2,48:$V3,77:$V4,78:$V5,79:$V6,80:$V7,81:$V8},{1:[2,2]},o($Va,[2,4]),{7:[1,36]},o($Va,[2,6]),o($Va,[2,7]),o($Va,[2,8]),o($Va,[2,9]),o($Va,[2,10]),o($Va,[2,11]),{15:[1,37],26:$Vb,45:$Vc,46:$Vd},{14:[1,41]},{14:[1,43],25:42},o($Ve,[2,35]),o($Ve,[2,36]),o($Ve,[2,37]),o($Ve,[2,38]),o($Ve,[2,39]),o($Ve,[2,40]),o($Ve,[2,41]),o($Ve,[2,42]),o($Ve,[2,43]),o($Ve,[2,44]),o($Ve,[2,45]),o($Vf,[2,95]),o($Vf,[2,96]),o($Vf,[2,97]),o($Vf,[2,98]),o($Vf,[2,99]),{15:[1,44]},{15:[1,45]},{1:[2,1]},o($Va,[2,3]),{7:[1,46]},o($Va,[2,5]),{16:[1,47],20:[1,48]},{2:$Vg,14:$Vh,15:$Vi,27:49,50:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx},{7:[1,68]},{7:[1,69]},{15:[1,70]},{7:[1,71],26:[1,72],28:[1,73]},o($Vy,[2,25],{29:[1,74]}),{2:$Vg,14:$Vh,15:$Vi,27:75,50:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx},{2:$Vg,14:$Vh,15:$Vi,27:76,50:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx},o($Ve,[2,46]),{17:[1,77]},{16:[1,78]},{7:[1,79],45:$Vz,46:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO},{2:$Vg,14:$Vh,15:$Vi,27:96,50:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx},{2:$Vg,14:$Vh,15:$Vi,18:98,27:97,50:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$V4,78:$V5,79:$V6,80:$V7,81:$V8},{2:$Vg,14:$Vh,15:$Vi,27:99,50:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx},o($VP,[2,90],{15:[1,100]}),{15:[1,101]},{15:[1,102]},{15:[1,103]},{15:[1,104]},{15:[1,105]},{15:[1,106]},{15:[1,107]},o($VP,[2,84]),o($VP,[2,85]),o($VP,[2,86]),o($VP,[2,87]),o($VP,[2,88]),o($VP,[2,89]),{7:[1,108]},o($Ve,[2,53]),o($Ve,[2,54]),{16:[1,109],20:[1,110]},o($Ve,[2,22]),{2:$Vg,14:$Vh,15:$Vi,27:111,50:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx},{14:[1,112]},{30:[1,113]},{16:[1,114],45:$Vz,46:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO},{16:[1,115],45:$Vz,46:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO},{18:116,21:[1,117],77:$V4,78:$V5,79:$V6,80:$V7,81:$V8},{17:[1,118]},o($Ve,[2,52]),{2:$Vg,14:$Vh,15:$Vi,27:119,50:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx},{2:$Vg,14:$Vh,15:$Vi,27:120,50:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx},{2:$Vg,14:$Vh,15:$Vi,27:121,50:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx},{2:$Vg,14:$Vh,15:$Vi,27:122,50:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx},{2:$Vg,14:$Vh,15:$Vi,27:123,50:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx},{2:$Vg,14:$Vh,15:$Vi,27:124,50:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx},{2:$Vg,14:$Vh,15:$Vi,27:125,50:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx},{2:$Vg,14:$Vh,15:$Vi,27:126,50:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx},{2:$Vg,14:$Vh,15:$Vi,27:127,50:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx},{2:$Vg,14:$Vh,15:$Vi,27:128,50:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx},{2:$Vg,14:$Vh,15:$Vi,27:129,50:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx},{2:$Vg,14:$Vh,15:$Vi,27:130,50:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx},{2:$Vg,14:$Vh,15:$Vi,27:131,50:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx},{2:$Vg,14:$Vh,15:$Vi,27:132,50:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx},o($VP,[2,91]),o($VP,[2,92]),o($VQ,[2,64],{45:$Vz,46:$VA}),{16:[1,133],45:$Vz,46:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO},{16:[1,134]},o($VR,[2,74],{45:$Vz,46:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM}),{2:$Vg,14:$Vh,15:$Vi,27:137,32:135,33:136,50:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx},{2:$Vg,14:$Vh,15:$Vi,27:138,50:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx},{2:$Vg,14:$Vh,15:$Vi,27:139,50:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx},{2:$Vg,14:$Vh,15:$Vi,27:140,50:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx},{2:$Vg,14:$Vh,15:$Vi,27:141,50:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx},{2:$Vg,14:$Vh,15:$Vi,27:142,50:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx},{2:$Vg,14:$Vh,15:$Vi,27:143,50:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx},{2:$Vg,14:$Vh,15:$Vi,27:144,50:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx},o($VP,[2,93]),{7:[1,145]},{16:[1,146]},{7:[1,147],45:$Vz,46:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO},o($Vy,[2,24]),{26:[1,148],29:[1,149]},{7:[1,150]},{7:[1,151]},{15:[1,152]},{22:[1,153]},{18:154,21:[1,155],77:$V4,78:$V5,79:$V6,80:$V7,81:$V8},o($VS,[2,58],{45:$Vz,46:$VA,51:$VD,52:$VE,53:$VF,54:$VG}),o($VS,[2,59],{45:$Vz,46:$VA,51:$VD,52:$VE,53:$VF,54:$VG}),o($VT,[2,60],{45:$Vz,46:$VA,53:$VF}),o($VT,[2,61],{45:$Vz,46:$VA,53:$VF}),o($VT,[2,62],{45:$Vz,46:$VA,53:$VF}),o($VT,[2,63],{45:$Vz,46:$VA,53:$VF}),o($VU,[2,66],{45:$Vz,46:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG}),o($VU,[2,67],{45:$Vz,46:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG}),o($VU,[2,68],{45:$Vz,46:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG}),o($VU,[2,69],{45:$Vz,46:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG}),o($VU,[2,70],{45:$Vz,46:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG}),o($VU,[2,71],{45:$Vz,46:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG}),o([7,16,28,30,61],[2,72],{45:$Vz,46:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,62:$VO}),o($VR,[2,73],{45:$Vz,46:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM}),o($VP,[2,65]),{2:$Vg,14:$Vh,15:$Vi,27:156,50:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx},{16:[1,157],28:$VV},o($VW,[2,30]),o($VW,[2,94],{45:$Vz,46:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO}),{16:[1,159],45:$Vz,46:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO},{16:[1,160],45:$Vz,46:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO},{16:[1,161],45:$Vz,46:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO},{16:[1,162],45:$Vz,46:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO},{16:[1,163],45:$Vz,46:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO},{16:[1,164],45:$Vz,46:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO},{16:[1,165],45:$Vz,46:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO},o($Va,[2,20]),{7:[1,166]},o($Ve,[2,23]),{29:[1,168],31:[1,167]},{30:[1,169]},o($Ve,[2,56]),o($Ve,[2,57]),{2:$V9,11:173,12:174,13:172,14:$VX,16:[1,170],18:14,19:171,34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,47:$V2,48:$V3,77:$V4,78:$V5,79:$V6,80:$V7,81:$V8},{2:$V9,11:173,12:174,13:172,14:$VX,18:14,19:177,23:[1,176],34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,47:$V2,48:$V3,77:$V4,78:$V5,79:$V6,80:$V7,81:$V8},{15:[1,178]},{22:[1,179]},o($VQ,[2,76],{45:$Vz,46:$VA}),{7:[1,180]},{2:$Vg,14:$Vh,15:$Vi,27:137,33:181,50:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx},o($VP,[2,77]),o($VP,[2,78]),o($VP,[2,79]),o($VP,[2,80]),o($VP,[2,81]),o($VP,[2,82]),o($VP,[2,83]),o($Va,[2,21]),{18:182,77:$V4,78:$V5,79:$V6,80:$V7,81:$V8},{2:$Vg,14:$Vh,15:$Vi,27:137,32:183,33:136,50:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx},{26:[1,184]},o($Va,[2,12]),{2:$V9,11:173,12:174,13:186,14:$VX,16:[1,185],18:14,34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,47:$V2,48:$V3,77:$V4,78:$V5,79:$V6,80:$V7,81:$V8},o($VY,[2,32]),o($VY,[2,33]),o($VY,[2,34]),{26:$Vb,45:$Vc,46:$Vd},o($Va,[2,16]),{2:$V9,11:173,12:174,13:186,14:$VX,18:14,23:[1,187],34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,47:$V2,48:$V3,77:$V4,78:$V5,79:$V6,80:$V7,81:$V8},{2:$V9,11:173,12:174,13:172,14:$VX,16:[1,188],18:14,19:189,34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,47:$V2,48:$V3,77:$V4,78:$V5,79:$V6,80:$V7,81:$V8},{2:$V9,11:173,12:174,13:172,14:$VX,18:14,19:191,23:[1,190],34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,47:$V2,48:$V3,77:$V4,78:$V5,79:$V6,80:$V7,81:$V8},o($VP,[2,75]),o($VW,[2,29]),{29:[1,192]},{28:$VV,30:[1,193]},{31:[1,194]},o($Va,[2,13]),o($VY,[2,31]),o($Va,[2,18]),o($Va,[2,14]),{2:$V9,11:173,12:174,13:186,14:$VX,16:[1,195],18:14,34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,47:$V2,48:$V3,77:$V4,78:$V5,79:$V6,80:$V7,81:$V8},o($Va,[2,17]),{2:$V9,11:173,12:174,13:186,14:$VX,18:14,23:[1,196],34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,47:$V2,48:$V3,77:$V4,78:$V5,79:$V6,80:$V7,81:$V8},{2:$Vg,14:$Vh,15:$Vi,27:197,50:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx},{7:[1,198]},{18:199,77:$V4,78:$V5,79:$V6,80:$V7,81:$V8},o($Va,[2,15]),o($Va,[2,19]),{30:[1,200],45:$Vz,46:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO},o($Ve,[2,28]),{29:[1,201]},{7:[1,202]},{2:$Vg,14:$Vh,15:$Vi,27:203,50:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx},o($Ve,[2,26]),{30:[1,204],45:$Vz,46:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO},{29:[1,205]},{2:$Vg,14:$Vh,15:$Vi,27:206,50:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx},{30:[1,207],45:$Vz,46:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO},{7:[1,208]},o($Ve,[2,27])],
defaultActions: {3:[2,2],33:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    var cadena = '';
    var errores = [];

	//Importanción de instrucciones
	const { Print } = require('../instrucciones/Print.ts');
        const { Println } = require('../instrucciones/Println.ts');
        const { Declaracion_Var } = require('../instrucciones/Declaracion_Var.ts');
        const { Asignacion } = require('../instrucciones/Asignacion.ts');
        //Importación de expresiones
        const { Literal } = require('../expresiones/Literal.ts');
        const { Identificador } = require('../expresiones/Identificador.ts');
        const { Casteo } = require('../expresiones/Casteo.ts');
                //expresiones aritméticas
        const { Suma } = require('../expresiones/aritmetica/Suma.ts');
        const { Resta } = require('../expresiones/aritmetica/Resta.ts');
        const { Multiplicacion } = require('../expresiones/aritmetica/Multiplicacion.ts');
        const { Division } = require('../expresiones/aritmetica/Division.ts');
        const { Potencia } = require('../expresiones/aritmetica/Potencia.ts');
        const { Modulo } = require('../expresiones/aritmetica/Modulo.ts');
        const { Negado } = require('../expresiones/aritmetica/Negado.ts');
        const { Incremento_Exp } = require('../expresiones/aritmetica/Incremento_Exp.ts');
        const { Decremento_Exp } = require('../expresiones/aritmetica/Decremento_Exp.ts');
                //expresiones de operaciones relacionales
        const { Igualacion } = require('../expresiones/operaciones_relacionales/Igualacion.ts');
        const { Diferenciacion } = require('../expresiones/operaciones_relacionales/Diferenciacion.ts');
        const { Menor_Que } = require('../expresiones/operaciones_relacionales/Menor_Que.ts');
        const { Mayor_Que } = require('../expresiones/operaciones_relacionales/Mayor_Que.ts');
        const { Mayor_Igual_Que } = require('../expresiones/operaciones_relacionales/Mayor_Igual_Que.ts');
        const { Menor_Igual_Que } = require('../expresiones/operaciones_relacionales/Menor_Igual_Que.ts');
                //expresiones de operaciones lógicos
        const { Or } = require('../expresiones/operadores_logicos/Or.ts');
        const { And } = require('../expresiones/operadores_logicos/And.ts');
        const { Not } = require('../expresiones/operadores_logicos/Not.ts');
                //expresiones de funciones reservadas
        const { ToString } = require('../expresiones/funciones_reservadas/ToString.ts');
        //Importación de herramientas auxiliares
        const { Consola } = require('../consola_singleton/Consola.ts');
        const { Tipo } = require('../abstracto/Retorno.ts');
        const { Excepcion } = require('../errores/Excepcion.ts');
        const { Retorno } = require('../abstracto/Retorno.ts');
        var consola = Consola.getInstance();
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: cadena = ''; this.begin("string"); 
break;
case 1: cadena += yy_.yytext; 
break;
case 2: cadena += "\""; 
break;
case 3: cadena += "\n"; 
break;
case 4: cadena += " ";  
break;
case 5: cadena += "\t"; 
break;
case 6: cadena += "\\"; 
break;
case 7: cadena += "\'"; 
break;
case 8: cadena += "\r"; 
break;
case 9: yy_.yytext = cadena; this.popState(); return 71; 
break;
case 10:/* Espacio en blanco (los ignora) */
break;
case 11:// Comentario de una linea (los ignora)
break;
case 12:/* Comentario Multilinea (los ignora) */
break;
case 13:return 77
break;
case 14:return 78
break;
case 15:return 79
break;
case 16:return 80
break;
case 17:return 81
break;
case 18:return 75
break;
case 19:return 76
break;
case 20:return 31
break;
case 21:return 'if'
break;
case 22:return 'else'
break;
case 23:return 'switch'
break;
case 24:return 'case'
break;
case 25:return 'default'
break;
case 26:return 48
break;
case 27:return 47
break;
case 28:return 'break'
break;
case 29:return 'while'
break;
case 30:return 'for'
break;
case 31:return 'do'
break;
case 32:return 'continue'
break;
case 33:return 'return'
break;
case 34:return 21
break;
case 35:return 64
break;
case 36:return 65
break;
case 37:return 66
break;
case 38:return 67
break;
case 39:return 68
break;
case 40:return 69
break;
case 41:return 70
break;
case 42:return 24
break;
case 43:/*incremento*/     return 45      
break;
case 44:/*decremento*/     return 46
break;
case 45:/*mas*/             return 49
break;
case 46:/*menos*/           return 50
break;
case 47:/*multiplicacion*/  return 51
break;
case 48:/*division*/        return 52
break;
case 49:/*exponente*/      return 53
break;
case 50:/*Modulo*/          return 54    
break;
case 51:/*igualacion*/     return 55
break;
case 52:/*Diferenciacion*/ return 56
break;
case 53:/*menorIgualQue*/  return 60
break;
case 54:/*mayorIgualQue*/  return 59
break;
case 55:/*menorQue*/        return 57
break;
case 56:/*mayorQue*/        return 58    
break;
case 57:/*igual*/           return 26
break;
case 58:/*interrogacion*/   return 'interrogacion'
break;
case 59:/*dosPuntos*/       return 17
break;
case 60:/*puntoYcoma*/      return 7
break;
case 61:/*or*/             return 61
break;
case 62:/*and*/            return 62
break;
case 63:/*NOT*/             return 63
break;
case 64:/*ParentesisAbre*/  return 15
break;
case 65:/*ParentesisCierra*/return 16
break;
case 66:/*LlaveAbre*/       return 22
break;
case 67:/*LlaveCierra*/     return 23
break;
case 68:/*CorcheteAbre*/    return 29
break;
case 69:/*CorcheteCierra*/  return 30
break;
case 70:return 28
break;
case 71:/*Identificador*/ return 14
break;
case 72:return 74
break;
case 73:return 73
break;
case 74:return 72
break;
case 75:return 5
break;
case 76: console.log("Error léxico") 
break;
}
},
rules: [/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\s)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\')/i,/^(?:\\r)/i,/^(?:["])/i,/^(?:\s+)/i,/^(?:\/\/[^\r\n]*[\r|\n|\r\n]?)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:println\b)/i,/^(?:print\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:Round\b)/i,/^(?:length\b)/i,/^(?:Typeof\b)/i,/^(?:tostring\b)/i,/^(?:toCharArray\b)/i,/^(?:run\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:;)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:,)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:[']\\\\[']|[']\\"[']|[']\\'[']|[']\\n[']|[']\\t[']|[']\\r[']|['].?['])/i,/^(?:[0-9]+(\.[0-9]+)+\b)/i,/^(?:[0-9]+)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[1,2,3,4,5,6,7,8,9],"inclusive":false},"INITIAL":{"rules":[0,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}