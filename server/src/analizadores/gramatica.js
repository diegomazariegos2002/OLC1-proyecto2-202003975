/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,13],$V2=[1,32],$V3=[1,33],$V4=[1,34],$V5=[1,35],$V6=[1,36],$V7=[1,37],$V8=[1,40],$V9=[1,41],$Va=[1,38],$Vb=[1,39],$Vc=[1,27],$Vd=[1,28],$Ve=[1,29],$Vf=[1,30],$Vg=[1,31],$Vh=[1,44],$Vi=[2,5,14,24,46,50,51,52,55,59,63,64,93,94,95,96,97,98,99],$Vj=[1,48],$Vk=[1,49],$Vl=[1,50],$Vm=[2,5,14,16,23,24,46,50,51,52,55,58,59,60,63,64,93,94,95,96,97,98,99],$Vn=[14,15,16,29],$Vo=[1,60],$Vp=[1,84],$Vq=[1,70],$Vr=[1,68],$Vs=[1,67],$Vt=[1,69],$Vu=[1,71],$Vv=[1,72],$Vw=[1,73],$Vx=[1,74],$Vy=[1,75],$Vz=[1,76],$VA=[1,77],$VB=[1,78],$VC=[1,79],$VD=[1,80],$VE=[1,81],$VF=[1,82],$VG=[1,83],$VH=[7,16],$VI=[7,26,28],$VJ=[2,25],$VK=[1,107],$VL=[2,114],$VM=[1,125],$VN=[1,126],$VO=[1,111],$VP=[1,112],$VQ=[1,113],$VR=[1,114],$VS=[1,115],$VT=[1,116],$VU=[1,117],$VV=[1,118],$VW=[1,119],$VX=[1,120],$VY=[1,121],$VZ=[1,122],$V_=[1,123],$V$=[1,124],$V01=[7,16,17,28,30,61,62,65,66,67,68,69,70,71,72,73,74,75,76,77,78],$V11=[2,5,14,16,23,24,46,50,51,52,54,55,58,59,60,63,64,93,94,95,96,97,98,99],$V21=[2,14,16,23,46,50,51,52,55,58,59,60,63,64,93,94,95,96,97,98,99],$V31=[7,16,17,28,30,65,66,67,68,69,70,71,72,73,74,75,76,77,78],$V41=[7,16,17,28,30,77,78],$V51=[7,16,17,28,30,65,66,71,72,73,74,75,76,77,78],$V61=[7,16,17,28,30,65,66,67,68,70,71,72,73,74,75,76,77,78],$V71=[7,16,17,28,30,71,72,73,74,75,76,77,78],$V81=[1,200],$V91=[16,28,30],$Va1=[2,48],$Vb1=[23,58,60],$Vc1=[2,14,46,50,51,52,55,59,63,64,93,94,95,96,97,98,99],$Vd1=[2,65],$Ve1=[2,63];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"ENTRADAS":4,"EOF":5,"ENTRADA":6,"puntoYcoma":7,"FUNCION":8,"METODO":9,"RUN":10,"DECLARACION_VAR":11,"DECLARACION_VECT":12,"INSTRUCCION":13,"identificador":14,"parentesisAbre":15,"parentesisCierra":16,"dosPuntos":17,"TIPO":18,"INSTRUCCIONES":19,"LISTAPARAMETROS":20,"void":21,"llaveAbre":22,"llaveCierra":23,"run":24,"LISTA_VARIABLES":25,"igual":26,"EXPRESION":27,"coma":28,"corcheteAbre":29,"corcheteCierra":30,"new":31,"LISTA_VALORES":32,"VALOR":33,"FOR":34,"WHILE":35,"DO_WHILE":36,"IF":37,"SWITCH":38,"SENTENCIA_TRANSFERENCIA":39,"ASIGNACION":40,"INCREMENTO":41,"DECREMENTO":42,"LLAMADA":43,"PRINT":44,"PRINTLN":45,"for":46,"FOR_DECLARACION":47,"FOR_ITERADOR":48,"BLOQUE":49,"while":50,"do":51,"if":52,"CONTROL_ELSE":53,"else":54,"switch":55,"CASELIST":56,"DEFAULT":57,"case":58,"break":59,"default":60,"incremento":61,"decremento":62,"print":63,"println":64,"mas":65,"menos":66,"multiplicacion":67,"division":68,"exponente":69,"modulo":70,"igualacion":71,"diferenciacion":72,"menorQue":73,"mayorQue":74,"mayorIgualQue":75,"menorIgualQue":76,"or":77,"and":78,"not":79,"toLower":80,"toUpper":81,"round":82,"length":83,"TypeOf":84,"to_String":85,"toCharArray":86,"cadena":87,"entero":88,"decimal":89,"caracter":90,"true":91,"false":92,"continue":93,"return":94,"int":95,"double":96,"boolean":97,"char":98,"string":99,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"puntoYcoma",14:"identificador",15:"parentesisAbre",16:"parentesisCierra",17:"dosPuntos",20:"LISTAPARAMETROS",21:"void",22:"llaveAbre",23:"llaveCierra",24:"run",26:"igual",28:"coma",29:"corcheteAbre",30:"corcheteCierra",31:"new",46:"for",50:"while",51:"do",52:"if",54:"else",55:"switch",58:"case",59:"break",60:"default",61:"incremento",62:"decremento",63:"print",64:"println",65:"mas",66:"menos",67:"multiplicacion",68:"division",69:"exponente",70:"modulo",71:"igualacion",72:"diferenciacion",73:"menorQue",74:"mayorQue",75:"mayorIgualQue",76:"menorIgualQue",77:"or",78:"and",79:"not",80:"toLower",81:"toUpper",82:"round",83:"length",84:"TypeOf",85:"to_String",86:"toCharArray",87:"cadena",88:"entero",89:"decimal",90:"caracter",91:"true",92:"false",93:"continue",94:"return",95:"int",96:"double",97:"boolean",98:"char",99:"string"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[4,2],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[8,7],[8,8],[8,8],[8,9],[9,7],[9,8],[9,8],[9,9],[10,5],[10,6],[11,2],[11,4],[25,3],[25,1],[12,11],[12,16],[12,9],[32,3],[32,1],[19,2],[19,1],[13,2],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,2],[13,2],[13,2],[13,1],[13,1],[13,1],[13,2],[13,0],[34,9],[47,1],[47,1],[48,1],[48,1],[48,1],[35,5],[36,7],[37,6],[53,2],[53,2],[53,0],[38,8],[56,5],[56,7],[56,4],[56,6],[56,0],[57,5],[57,3],[57,0],[40,3],[41,2],[42,2],[43,0],[44,5],[45,5],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[27,5],[27,4],[27,4],[27,4],[27,4],[27,4],[27,4],[27,4],[27,4],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,2],[27,2],[27,2],[49,3],[49,2],[39,2],[39,2],[39,3],[39,2],[33,1],[18,1],[18,1],[18,1],[18,1],[18,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 return ""; 
break;
case 3:
  if($$[$0]!=="") $$[$0-1].push($$[$0]); this.$=$$[$0-1]; 
break;
case 4:
 if(this.$!=="") this.$=[$$[$0]]; else this.$=[]; 
break;
case 5:
 console.error('Este es un error sintáctico'); let retorno = {value: null, type: Tipo.ERROR}; return retorno;
break;
case 11: case 35: case 36: case 37: case 38: case 39: case 45: case 46: case 50: case 51: case 52: case 53: case 54: case 58: case 59:
 this.$ = $$[$0]; 
break;
case 22:
 this.$ = new Declaracion_Var($$[$0], null, $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 23:
 this.$ = new Declaracion_Var($$[$0-2], $$[$0], $$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 24:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 25: case 32:
 this.$ = [$$[$0]]; 
break;
case 31:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 33: case 41: case 42: case 43:
 this.$ = $$[$0-1]; 
break;
case 40:
 this.$ = $$[$0];
break;
case 47:

                        console.log("Error sintáctico en la línea: "+(yylineno + 1));
                        var consola = Consola.getInstance();
                        const excepcion1 = new Excepcion("Error sintáctico", "El caracter no se esperaba en esta posición.", this._$.first_line, this._$.first_column+1);
                        consola.set_Error(excepcion1);
                        
break;
case 48:
 this.$ = null;
break;
case 49:
 this.$ = new For($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 55:
 this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 56:
 this.$ = new Do_While($$[$0-5], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 57:
 this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 60: case 69:
 this.$ = null; 
break;
case 61:
 this.$ = new Switch($$[$0-5], $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 62:
 $$[$0-4].push(new Case($$[$0-2], $$[$0], false, _$[$0-4].first_line, _$[$0-4].first_column, $$[$0-4].length)); this.$ = $$[$0-4]; 
break;
case 63:
 $$[$0-6].push(new Case($$[$0-4], $$[$0-2], true, _$[$0-6].first_line, _$[$0-6].first_column, $$[$0-6].length)); this.$ = $$[$0-6]; 
break;
case 64:
 this.$ = [new Case($$[$0-2], $$[$0], false, _$[$0-3].first_line, _$[$0-3].first_column, 0)]; 
break;
case 65:
 this.$ = [new Case($$[$0-4], $$[$0-2], true, _$[$0-5].first_line, _$[$0-5].first_column, 0)]; 
break;
case 66:
this.$ = null;
break;
case 67:
 this.$ = new Default($$[$0-2], true, _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 68:
 this.$ = new Default($$[$0], false, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 70:
 this.$ = new Asignacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 71:
 this.$ = new Incremento_Ins($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 72:
 this.$ = new Decremento_Ins($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 74:
 this.$ = new Print($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 75:
 this.$ = new Println($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 76:
 this.$ = new Suma($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 77:
 this.$ = new Resta($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 78:
 this.$ = new Multiplicacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 79:
 this.$ = new Division($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 80:
 this.$ = new Potencia($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 81:
 this.$ = new Modulo($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 82:
 this.$ = new Negado($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 83:
 this.$ = $$[$0-1];
break;
case 84:
 this.$ = new Igualacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 85:
 this.$ = new Diferenciacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 86:
 this.$ = new Menor_Que($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 87:
 this.$ = new Mayor_Que($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 88:
 this.$ = new Mayor_Igual_Que($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 89:
 this.$ = new Menor_Igual_Que($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 90:
 this.$ = new Or($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 91:
 this.$ = new And($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 92:
 this.$ = new Not($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 94:
 this.$ = new Casteo($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 100:
 this.$ = new ToString($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 102:
 this.$ = new Literal($$[$0], Tipo.STRING, _$[$0].first_line, _$[$0].first_column); 
break;
case 103:
 this.$ = new Literal($$[$0], Tipo.INT, _$[$0].first_line, _$[$0].first_column); 
break;
case 104:
 this.$ = new Literal($$[$0], Tipo.DOUBLE, _$[$0].first_line, _$[$0].first_column); 
break;
case 105:
 this.$ = new Literal($$[$0], Tipo.CHAR, _$[$0].first_line, _$[$0].first_column); 
break;
case 106: case 107:
 this.$ = new Literal($$[$0], Tipo.BOOLEAN, _$[$0].first_line, _$[$0].first_column); 
break;
case 108:
 this.$ = new Identificador($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 109:
 this.$ = new Incremento_Exp($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 110:
 this.$ = new Decremento_Exp($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 111:

                        console.log("Error sintáctico en la línea: "+(yylineno + 1));
                        var consola = Consola.getInstance();
                        const excepcion2 = new Excepcion("Error sintáctico", "El caracter no se esperaba en esta posición.", this._$.first_line, this._$.first_column+1);
                        consola.set_Error(excepcion2);  
        
break;
case 112:
 this.$ = new Bloque($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 113:
 this.$ = new Bloque(new Array(), _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 114:
 this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 115:
 this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 119:
 this.$ = Tipo.INT;
break;
case 120:
 this.$ = Tipo.DOUBLE; 
break;
case 121:
 this.$ = Tipo.BOOLEAN; 
break;
case 122:
 this.$ = Tipo.CHAR; 
break;
case 123:
 this.$ = Tipo.STRING; 
break;
}
},
table: [{2:[1,5],3:1,4:2,5:[1,3],6:4,8:6,9:7,10:8,11:9,12:10,13:11,14:$V0,18:14,24:$V1,34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,45:26,46:$V2,50:$V3,51:$V4,52:$V5,55:$V6,59:$V7,63:$V8,64:$V9,93:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg},{1:[3]},{2:$Vh,5:[1,42],6:43,8:6,9:7,10:8,11:9,12:10,13:11,14:$V0,18:14,24:$V1,34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,45:26,46:$V2,50:$V3,51:$V4,52:$V5,55:$V6,59:$V7,63:$V8,64:$V9,93:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg},{1:[2,2]},o($Vi,[2,4]),{7:[1,45]},o($Vi,[2,6]),o($Vi,[2,7]),o($Vi,[2,8]),{7:[1,46]},o($Vi,[2,10]),o($Vi,[2,11]),{15:[1,47],26:$Vj,61:$Vk,62:$Vl},{14:[1,51]},{14:[1,53],25:52},o($Vm,[2,35]),o($Vm,[2,36]),o($Vm,[2,37]),o($Vm,[2,38]),o($Vm,[2,39]),o($Vm,[2,40]),{7:[1,54]},{7:[1,55]},{7:[1,56]},o($Vm,[2,44]),o($Vm,[2,45]),o($Vm,[2,46]),o($Vn,[2,119]),o($Vn,[2,120]),o($Vn,[2,121]),o($Vn,[2,122]),o($Vn,[2,123]),{15:[1,57]},{15:[1,58]},{22:$Vo,49:59},{15:[1,61]},{15:[1,62]},{7:[1,63]},{7:[1,64]},{2:$Vp,7:[1,66],14:$Vq,15:$Vr,27:65,66:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG},{15:[1,85]},{15:[1,86]},{1:[2,1]},o($Vi,[2,3]),{7:[1,87]},o($Vi,[2,5]),o($Vi,[2,9]),{16:[1,88],20:[1,89]},{2:$Vp,14:$Vq,15:$Vr,27:90,66:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG},o($VH,[2,71]),o($VH,[2,72]),{15:[1,91]},{7:[2,22],26:[1,92],28:[1,93]},o($VI,$VJ,{29:[1,94]}),o($Vm,[2,41]),o($Vm,[2,42]),o($Vm,[2,43]),{11:96,14:[1,99],18:98,40:97,47:95,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg},{2:$Vp,14:$Vq,15:$Vr,27:100,66:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG},{50:[1,101]},{2:$Vh,11:105,12:106,13:104,14:$VK,18:14,19:102,23:[1,103],34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,45:26,46:$V2,50:$V3,51:$V4,52:$V5,55:$V6,59:$V7,63:$V8,64:$V9,93:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg},{2:$Vp,14:$Vq,15:$Vr,27:108,66:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG},{2:$Vp,14:$Vq,15:$Vr,27:109,66:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG},o($Vm,$VL),o($Vm,[2,115]),{7:[1,110],61:$VM,62:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$},o($Vm,[2,117]),{2:$Vp,14:$Vq,15:$Vr,27:127,66:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG},{2:$Vp,14:$Vq,15:$Vr,18:129,27:128,66:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg},{2:$Vp,14:$Vq,15:$Vr,27:130,66:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG},o($V01,[2,108],{15:[1,131]}),{15:[1,132]},{15:[1,133]},{15:[1,134]},{15:[1,135]},{15:[1,136]},{15:[1,137]},{15:[1,138]},o($V01,[2,102]),o($V01,[2,103]),o($V01,[2,104]),o($V01,[2,105]),o($V01,[2,106]),o($V01,[2,107]),{7:[1,139]},{2:$Vp,14:$Vq,15:$Vr,27:140,66:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG},{2:$Vp,14:$Vq,15:$Vr,27:141,66:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG},o($Vm,[2,47]),{17:[1,142]},{16:[1,143]},o($VH,[2,70],{61:$VM,62:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$}),{16:[1,144],20:[1,145]},{2:$Vp,14:$Vq,15:$Vr,27:146,66:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG},{14:[1,147]},{30:[1,148]},{7:[1,149]},{7:[2,50]},{7:[2,51]},{14:[1,150],25:52},{26:$Vj},{16:[1,151],61:$VM,62:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$},{15:[1,152]},{2:$Vh,11:105,12:106,13:154,14:$VK,18:14,23:[1,153],34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,45:26,46:$V2,50:$V3,51:$V4,52:$V5,55:$V6,59:$V7,63:$V8,64:$V9,93:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg},o($V11,[2,113]),o($V21,[2,32]),{7:[1,155]},o($V21,[2,34]),{26:$Vj,61:$Vk,62:$Vl},{16:[1,156],61:$VM,62:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$},{16:[1,157],61:$VM,62:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$},o($Vm,[2,116]),{2:$Vp,14:$Vq,15:$Vr,27:158,66:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG},{2:$Vp,14:$Vq,15:$Vr,27:159,66:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG},{2:$Vp,14:$Vq,15:$Vr,27:160,66:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG},{2:$Vp,14:$Vq,15:$Vr,27:161,66:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG},{2:$Vp,14:$Vq,15:$Vr,27:162,66:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG},{2:$Vp,14:$Vq,15:$Vr,27:163,66:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG},{2:$Vp,14:$Vq,15:$Vr,27:164,66:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG},{2:$Vp,14:$Vq,15:$Vr,27:165,66:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG},{2:$Vp,14:$Vq,15:$Vr,27:166,66:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG},{2:$Vp,14:$Vq,15:$Vr,27:167,66:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG},{2:$Vp,14:$Vq,15:$Vr,27:168,66:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG},{2:$Vp,14:$Vq,15:$Vr,27:169,66:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG},{2:$Vp,14:$Vq,15:$Vr,27:170,66:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG},{2:$Vp,14:$Vq,15:$Vr,27:171,66:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG},o($V01,[2,109]),o($V01,[2,110]),o($V31,[2,82],{61:$VM,62:$VN}),{16:[1,172],61:$VM,62:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$},{16:[1,173]},o($V41,[2,92],{61:$VM,62:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ}),{2:$Vp,14:$Vq,15:$Vr,27:176,32:174,33:175,66:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG},{2:$Vp,14:$Vq,15:$Vr,27:177,66:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG},{2:$Vp,14:$Vq,15:$Vr,27:178,66:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG},{2:$Vp,14:$Vq,15:$Vr,27:179,66:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG},{2:$Vp,14:$Vq,15:$Vr,27:180,66:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG},{2:$Vp,14:$Vq,15:$Vr,27:181,66:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG},{2:$Vp,14:$Vq,15:$Vr,27:182,66:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG},{2:$Vp,14:$Vq,15:$Vr,27:183,66:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG},o($V01,[2,111]),{16:[1,184],61:$VM,62:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$},{16:[1,185],61:$VM,62:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$},{18:186,21:[1,187],95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg},{17:[1,188]},{7:[1,189]},{16:[1,190]},{7:[2,23],61:$VM,62:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$},o($VI,[2,24]),{26:[1,191],29:[1,192]},{2:$Vp,14:$Vq,15:$Vr,27:193,66:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG},o($VI,$VJ),{22:$Vo,49:194},{2:$Vp,14:$Vq,15:$Vr,27:195,66:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG},o($V11,[2,112]),o($V21,[2,31]),o($V21,[2,33]),{22:$Vo,49:196},{22:[1,197]},o($V51,[2,76],{61:$VM,62:$VN,67:$VQ,68:$VR,69:$VS,70:$VT}),o($V51,[2,77],{61:$VM,62:$VN,67:$VQ,68:$VR,69:$VS,70:$VT}),o($V61,[2,78],{61:$VM,62:$VN,69:$VS}),o($V61,[2,79],{61:$VM,62:$VN,69:$VS}),o($V61,[2,80],{61:$VM,62:$VN,69:$VS}),o($V61,[2,81],{61:$VM,62:$VN,69:$VS}),o($V71,[2,84],{61:$VM,62:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT}),o($V71,[2,85],{61:$VM,62:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT}),o($V71,[2,86],{61:$VM,62:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT}),o($V71,[2,87],{61:$VM,62:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT}),o($V71,[2,88],{61:$VM,62:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT}),o($V71,[2,89],{61:$VM,62:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT}),o([7,16,17,28,30,77],[2,90],{61:$VM,62:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,78:$V$}),o($V41,[2,91],{61:$VM,62:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ}),o($V01,[2,83]),{2:$Vp,14:$Vq,15:$Vr,27:198,66:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG},{16:[1,199],28:$V81},o($V91,[2,30]),o($V91,[2,118],{61:$VM,62:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$}),{16:[1,201],61:$VM,62:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$},{16:[1,202],61:$VM,62:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$},{16:[1,203],61:$VM,62:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$},{16:[1,204],61:$VM,62:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$},{16:[1,205],61:$VM,62:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$},{16:[1,206],61:$VM,62:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$},{16:[1,207],61:$VM,62:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$},{7:[1,208]},{7:[1,209]},{15:[1,210]},{22:[1,211]},{18:212,21:[1,213],95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg},o($Vi,[2,20]),{7:[1,214]},{29:[1,216],31:[1,215]},{30:[1,217]},{7:[1,218],61:$VM,62:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$},o($Vm,[2,55]),{16:[1,219],61:$VM,62:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$},o($Vm,[2,60],{53:220,54:[1,221]}),o([23,60],[2,66],{56:222,58:[1,223]}),o($V31,[2,94],{61:$VM,62:$VN}),{7:[1,224]},{2:$Vp,14:$Vq,15:$Vr,27:176,33:225,66:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG},o($V01,[2,95]),o($V01,[2,96]),o($V01,[2,97]),o($V01,[2,98]),o($V01,[2,99]),o($V01,[2,100]),o($V01,[2,101]),o($Vm,[2,74]),o($Vm,[2,75]),{2:$Vh,11:105,12:106,13:104,14:$VK,16:[1,226],18:14,19:227,34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,45:26,46:$V2,50:$V3,51:$V4,52:$V5,55:$V6,59:$V7,63:$V8,64:$V9,93:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg},{2:$Vh,11:105,12:106,13:104,14:$VK,18:14,19:229,23:[1,228],34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,45:26,46:$V2,50:$V3,51:$V4,52:$V5,55:$V6,59:$V7,63:$V8,64:$V9,93:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg},{15:[1,230]},{22:[1,231]},o($Vi,[2,21]),{18:232,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg},{2:$Vp,14:$Vq,15:$Vr,27:176,32:233,33:175,66:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG},{26:[1,234]},{14:$VK,40:236,41:237,42:238,48:235},{7:[1,239]},o($Vm,[2,57]),{22:$Vo,37:241,49:240,52:$V5},{23:[2,69],57:242,58:[1,243],60:[1,244]},{2:$Vp,14:$Vq,15:$Vr,27:245,66:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG},o($V01,[2,93]),o($V91,[2,29]),o($Vi,[2,12]),{2:$Vh,11:105,12:106,13:154,14:$VK,16:[1,246],18:14,34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,45:26,46:$V2,50:$V3,51:$V4,52:$V5,55:$V6,59:$V7,63:$V8,64:$V9,93:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg},o($Vi,[2,16]),{2:$Vh,11:105,12:106,13:154,14:$VK,18:14,23:[1,247],34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,45:26,46:$V2,50:$V3,51:$V4,52:$V5,55:$V6,59:$V7,63:$V8,64:$V9,93:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg},{2:$Vh,11:105,12:106,13:104,14:$VK,16:[1,248],18:14,19:249,34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,45:26,46:$V2,50:$V3,51:$V4,52:$V5,55:$V6,59:$V7,63:$V8,64:$V9,93:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg},{2:$Vh,11:105,12:106,13:104,14:$VK,18:14,19:251,23:[1,250],34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,45:26,46:$V2,50:$V3,51:$V4,52:$V5,55:$V6,59:$V7,63:$V8,64:$V9,93:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg},{29:[1,252]},{28:$V81,30:[1,253]},{31:[1,254]},{16:[1,255]},{16:[2,52]},{16:[2,53]},{16:[2,54]},o($Vm,[2,56]),o($Vm,[2,58]),o($Vm,[2,59]),{23:[1,256]},{2:$Vp,14:$Vq,15:$Vr,27:257,66:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG},{17:[1,258]},{17:[1,259],61:$VM,62:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$},o($Vi,[2,13]),o($Vi,[2,18]),o($Vi,[2,14]),{2:$Vh,11:105,12:106,13:154,14:$VK,16:[1,260],18:14,34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,45:26,46:$V2,50:$V3,51:$V4,52:$V5,55:$V6,59:$V7,63:$V8,64:$V9,93:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg},o($Vi,[2,17]),{2:$Vh,11:105,12:106,13:154,14:$VK,18:14,23:[1,261],34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,45:26,46:$V2,50:$V3,51:$V4,52:$V5,55:$V6,59:$V7,63:$V8,64:$V9,93:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg},{2:$Vp,14:$Vq,15:$Vr,27:262,66:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG},{7:[1,263]},{18:264,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg},{22:$Vo,49:265},o($Vm,[2,61]),{17:[1,266],61:$VM,62:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$},{2:$Vh,11:105,12:106,13:104,14:$VK,18:14,19:267,23:$Va1,34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,45:26,46:$V2,50:$V3,51:$V4,52:$V5,55:$V6,59:$V7,63:$V8,64:$V9,93:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg},o($Vb1,$Va1,{18:14,34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,45:26,13:104,11:105,12:106,19:268,2:$Vh,14:$VK,46:$V2,50:$V3,51:$V4,52:$V5,55:$V6,59:$V7,63:$V8,64:$V9,93:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg}),o($Vi,[2,15]),o($Vi,[2,19]),{30:[1,269],61:$VM,62:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$},o($Vm,[2,28]),{29:[1,270]},o($Vm,[2,49]),o($Vb1,$Va1,{18:14,34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,45:26,13:104,11:105,12:106,19:271,2:$Vh,14:$VK,46:$V2,50:$V3,51:$V4,52:$V5,55:$V6,59:$V7,63:$V8,64:$V9,93:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg}),{2:$Vh,11:105,12:106,13:154,14:$VK,18:14,23:[2,68],34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,45:26,46:$V2,50:$V3,51:$V4,52:$V5,55:$V6,59:[1,272],63:$V8,64:$V9,93:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg},o($Vb1,[2,64],{18:14,34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,45:26,11:105,12:106,13:154,2:$Vh,14:$VK,46:$V2,50:$V3,51:$V4,52:$V5,55:$V6,59:[1,273],63:$V8,64:$V9,93:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg}),{7:[1,274]},{2:$Vp,14:$Vq,15:$Vr,27:275,66:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG},o($Vb1,[2,62],{18:14,34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,45:26,11:105,12:106,13:154,2:$Vh,14:$VK,46:$V2,50:$V3,51:$V4,52:$V5,55:$V6,59:[1,276],63:$V8,64:$V9,93:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg}),{7:[1,277]},{7:[1,278]},o($Vm,[2,26]),{30:[1,279],61:$VM,62:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$},{7:[1,280]},o($Vc1,$VL,{23:[2,67]}),o($Vc1,$VL,{23:$Vd1,58:$Vd1,60:$Vd1}),{29:[1,281]},o($Vc1,$VL,{23:$Ve1,58:$Ve1,60:$Ve1}),{2:$Vp,14:$Vq,15:$Vr,27:282,66:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG},{30:[1,283],61:$VM,62:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$},{7:[1,284]},o($Vm,[2,27])],
defaultActions: {3:[2,2],42:[2,1],96:[2,50],97:[2,51],236:[2,52],237:[2,53],238:[2,54]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    var cadena = '';
    var errores = [];

	//Importanción de instrucciones
	const { Print } = require('../instrucciones/Print.ts');
        const { Println } = require('../instrucciones/Println.ts');
        const { Declaracion_Var } = require('../instrucciones/Declaracion_Var.ts');
        const { Asignacion } = require('../instrucciones/Asignacion.ts');
        const { Bloque } = require('../instrucciones/Bloque.ts');
                //Sentecias de transición
        const { Break } = require('../instrucciones/sentencias_de_transicion/Break.ts');
        const { Continue } = require('../instrucciones/sentencias_de_transicion/Continue.ts');
                //Instrucciones de sentencias de control
        const { If } = require('../instrucciones/sentencias_de_control/If.ts');
        const { Switch } = require('../instrucciones/sentencias_de_control/Switch.ts');
        const { Case } = require('../instrucciones/sentencias_de_control/Case.ts');
        const { Default } = require('../instrucciones/sentencias_de_control/Default.ts');
                //Instrucciones ciclicas
        const { For } = require('../instrucciones/sentencias_ciclicas/For.ts');
        const { While } = require('../instrucciones/sentencias_ciclicas/While.ts');
        const { Do_While }  = require('../instrucciones/sentencias_ciclicas/Do_While.ts');
                //Instrucciones aritmeticas
        const { Incremento_Ins } = require('../instrucciones/aritmetica/Incremento_Ins.ts');        
        const { Decremento_Ins } = require('../instrucciones/aritmetica/Decremento_Ins.ts');
        //Importación de expresiones
        const { Literal } = require('../expresiones/Literal.ts');
        const { Identificador } = require('../expresiones/Identificador.ts');
        const { Casteo } = require('../expresiones/Casteo.ts');
                //expresiones aritméticas
        const { Suma } = require('../expresiones/aritmetica/Suma.ts');
        const { Resta } = require('../expresiones/aritmetica/Resta.ts');
        const { Multiplicacion } = require('../expresiones/aritmetica/Multiplicacion.ts');
        const { Division } = require('../expresiones/aritmetica/Division.ts');
        const { Potencia } = require('../expresiones/aritmetica/Potencia.ts');
        const { Modulo } = require('../expresiones/aritmetica/Modulo.ts');
        const { Negado } = require('../expresiones/aritmetica/Negado.ts');
        const { Incremento_Exp } = require('../expresiones/aritmetica/Incremento_Exp.ts');
        const { Decremento_Exp } = require('../expresiones/aritmetica/Decremento_Exp.ts');
                //expresiones de operaciones relacionales
        const { Igualacion } = require('../expresiones/operaciones_relacionales/Igualacion.ts');
        const { Diferenciacion } = require('../expresiones/operaciones_relacionales/Diferenciacion.ts');
        const { Menor_Que } = require('../expresiones/operaciones_relacionales/Menor_Que.ts');
        const { Mayor_Que } = require('../expresiones/operaciones_relacionales/Mayor_Que.ts');
        const { Mayor_Igual_Que } = require('../expresiones/operaciones_relacionales/Mayor_Igual_Que.ts');
        const { Menor_Igual_Que } = require('../expresiones/operaciones_relacionales/Menor_Igual_Que.ts');
                //expresiones de operaciones lógicos
        const { Or } = require('../expresiones/operadores_logicos/Or.ts');
        const { And } = require('../expresiones/operadores_logicos/And.ts');
        const { Not } = require('../expresiones/operadores_logicos/Not.ts');
                //expresiones de funciones reservadas
        const { ToString } = require('../expresiones/funciones_reservadas/ToString.ts');
        //Importación de herramientas auxiliares
        const { Consola } = require('../consola_singleton/Consola.ts');
        const { Tipo } = require('../abstracto/Retorno.ts');
        const { Excepcion } = require('../errores/Excepcion.ts');
        const { Retorno } = require('../abstracto/Retorno.ts');
        var consola = Consola.getInstance();
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: cadena = ''; this.begin("string"); 
break;
case 1: cadena += yy_.yytext; 
break;
case 2: cadena += "\""; 
break;
case 3: cadena += "\n"; 
break;
case 4: cadena += " ";  
break;
case 5: cadena += "\t"; 
break;
case 6: cadena += "\\"; 
break;
case 7: cadena += "\'"; 
break;
case 8: cadena += "\r"; 
break;
case 9: yy_.yytext = cadena; this.popState(); return 87; 
break;
case 10:/* Espacio en blanco (los ignora) */
break;
case 11:// Comentario de una linea (los ignora)
break;
case 12:/* Comentario Multilinea (los ignora) */
break;
case 13:return 95
break;
case 14:return 96
break;
case 15:return 97
break;
case 16:return 98
break;
case 17:return 99
break;
case 18:return 91
break;
case 19:return 92
break;
case 20:return 31
break;
case 21:return 52
break;
case 22:return 54
break;
case 23:return 55
break;
case 24:return 58
break;
case 25:return 60
break;
case 26:return 64
break;
case 27:return 63
break;
case 28:return 59
break;
case 29:return 50
break;
case 30:return 46
break;
case 31:return 51
break;
case 32:return 93
break;
case 33:return 94
break;
case 34:return 21
break;
case 35:return 80
break;
case 36:return 81
break;
case 37:return 82
break;
case 38:return 83
break;
case 39:return 84
break;
case 40:return 85
break;
case 41:return 86
break;
case 42:return 24
break;
case 43:/*incremento*/     return 61      
break;
case 44:/*decremento*/     return 62
break;
case 45:/*mas*/             return 65
break;
case 46:/*menos*/           return 66
break;
case 47:/*multiplicacion*/  return 67
break;
case 48:/*division*/        return 68
break;
case 49:/*exponente*/      return 69
break;
case 50:/*Modulo*/          return 70    
break;
case 51:/*igualacion*/     return 71
break;
case 52:/*Diferenciacion*/ return 72
break;
case 53:/*menorIgualQue*/  return 76
break;
case 54:/*mayorIgualQue*/  return 75
break;
case 55:/*menorQue*/        return 73
break;
case 56:/*mayorQue*/        return 74    
break;
case 57:/*igual*/           return 26
break;
case 58:/*interrogacion*/   return 'interrogacion'
break;
case 59:/*dosPuntos*/       return 17
break;
case 60:/*puntoYcoma*/      return 7
break;
case 61:/*or*/             return 77
break;
case 62:/*and*/            return 78
break;
case 63:/*NOT*/             return 79
break;
case 64:/*ParentesisAbre*/  return 15
break;
case 65:/*ParentesisCierra*/return 16
break;
case 66:/*LlaveAbre*/       return 22
break;
case 67:/*LlaveCierra*/     return 23
break;
case 68:/*CorcheteAbre*/    return 29
break;
case 69:/*CorcheteCierra*/  return 30
break;
case 70:return 28
break;
case 71:/*Identificador*/ return 14
break;
case 72:return 90
break;
case 73:return 89
break;
case 74:return 88
break;
case 75:return 5
break;
case 76: console.log("Error léxico") 
break;
}
},
rules: [/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\s)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\')/i,/^(?:\\r)/i,/^(?:["])/i,/^(?:\s+)/i,/^(?:\/\/[^\r\n]*[\r|\n|\r\n]?)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:println\b)/i,/^(?:print\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:Round\b)/i,/^(?:length\b)/i,/^(?:Typeof\b)/i,/^(?:tostring\b)/i,/^(?:toCharArray\b)/i,/^(?:run\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:;)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:,)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:[']\\\\[']|[']\\"[']|[']\\'[']|[']\\n[']|[']\\t[']|[']\\r[']|['].?['])/i,/^(?:[0-9]+(\.[0-9]+)+\b)/i,/^(?:[0-9]+)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[1,2,3,4,5,6,7,8,9],"inclusive":false},"INITIAL":{"rules":[0,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}