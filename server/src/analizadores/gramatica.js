/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,13],$V2=[1,32],$V3=[1,33],$V4=[1,34],$V5=[1,35],$V6=[1,36],$V7=[1,37],$V8=[1,40],$V9=[1,41],$Va=[1,38],$Vb=[1,39],$Vc=[1,27],$Vd=[1,28],$Ve=[1,29],$Vf=[1,30],$Vg=[1,31],$Vh=[2,5,14,23,44,47,48,49,52,58,62,63,92,93,94,95,96,97,98],$Vi=[1,48],$Vj=[1,49],$Vk=[1,50],$Vl=[2,5,14,23,44,47,48,49,52,56,57,58,59,62,63,92,93,94,95,96,97,98],$Vm=[14,16,28,53],$Vn=[1,62],$Vo=[1,87],$Vp=[1,86],$Vq=[1,70],$Vr=[1,69],$Vs=[1,71],$Vt=[1,73],$Vu=[1,74],$Vv=[1,75],$Vw=[1,76],$Vx=[1,77],$Vy=[1,78],$Vz=[1,79],$VA=[1,80],$VB=[1,81],$VC=[1,82],$VD=[1,83],$VE=[1,84],$VF=[1,85],$VG=[2,5,7,14,23,44,47,48,49,52,58,62,63,92,93,94,95,96,97,98],$VH=[7,16],$VI=[1,98],$VJ=[7,22,26],$VK=[2,26],$VL=[1,113],$VM=[1,116],$VN=[2,117],$VO=[1,134],$VP=[1,135],$VQ=[1,120],$VR=[1,121],$VS=[1,122],$VT=[1,123],$VU=[1,124],$VV=[1,125],$VW=[1,126],$VX=[1,127],$VY=[1,128],$VZ=[1,129],$V_=[1,130],$V$=[1,131],$V01=[1,132],$V11=[1,133],$V21=[7,16,17,22,29,60,61,64,65,66,67,68,69,70,71,72,73,74,75,76,77],$V31=[2,76],$V41=[1,155],$V51=[16,22,29],$V61=[1,168],$V71=[2,5,14,23,44,47,48,49,51,52,56,57,58,59,62,63,92,93,94,95,96,97,98],$V81=[2,14,44,47,48,49,52,56,57,58,59,62,63,92,93,94,95,96,97,98],$V91=[7,16,17,22,29,64,65,66,67,68,69,70,71,72,73,74,75,76,77],$Va1=[7,16,17,22,29,76,77],$Vb1=[16,22],$Vc1=[2,7,14,44,47,48,49,52,56,57,58,59,62,63,92,93,94,95,96,97,98],$Vd1=[7,16,17,22,29,64,65,70,71,72,73,74,75,76,77],$Ve1=[7,16,17,22,29,64,65,66,67,69,70,71,72,73,74,75,76,77],$Vf1=[7,16,17,22,29,70,71,72,73,74,75,76,77],$Vg1=[2,50],$Vh1=[56,57,59],$Vi1=[2,14,44,47,48,49,52,58,62,63,92,93,94,95,96,97,98],$Vj1=[2,67],$Vk1=[2,65];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"ENTRADAS":4,"EOF":5,"ENTRADA":6,"puntoYcoma":7,"FUNCION":8,"METODO":9,"RUN":10,"DECLARACION_VAR":11,"DECLARACION_VECT":12,"INSTRUCCION":13,"identificador":14,"parentesisAbre":15,"parentesisCierra":16,"dosPuntos":17,"TIPO":18,"BLOQUE":19,"LISTA_PARAMETROS":20,"void":21,"coma":22,"run":23,"LLAMADA":24,"LISTA_VARIABLES":25,"igual":26,"EXPRESION":27,"corcheteAbre":28,"corcheteCierra":29,"new":30,"LISTA_VALORES":31,"INSTRUCCIONES":32,"FOR":33,"WHILE":34,"DO_WHILE":35,"IF":36,"SWITCH":37,"SENTENCIA_TRANSFERENCIA":38,"ASIGNACION":39,"INCREMENTO":40,"DECREMENTO":41,"PRINT":42,"PRINTLN":43,"for":44,"FOR_DECLARACION":45,"FOR_ITERADOR":46,"while":47,"do":48,"if":49,"CONTROL_ELSE":50,"else":51,"switch":52,"llaveAbre":53,"CASELIST":54,"DEFAULT":55,"llaveCierra":56,"case":57,"break":58,"default":59,"incremento":60,"decremento":61,"print":62,"println":63,"mas":64,"menos":65,"multiplicacion":66,"division":67,"exponente":68,"modulo":69,"igualacion":70,"diferenciacion":71,"menorQue":72,"mayorQue":73,"mayorIgualQue":74,"menorIgualQue":75,"or":76,"and":77,"not":78,"toLower":79,"toUpper":80,"round":81,"length":82,"TypeOf":83,"to_String":84,"toCharArray":85,"cadena":86,"entero":87,"decimal":88,"caracter":89,"true":90,"false":91,"continue":92,"return":93,"int":94,"double":95,"boolean":96,"char":97,"string":98,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"puntoYcoma",14:"identificador",15:"parentesisAbre",16:"parentesisCierra",17:"dosPuntos",21:"void",22:"coma",23:"run",26:"igual",28:"corcheteAbre",29:"corcheteCierra",30:"new",44:"for",47:"while",48:"do",49:"if",51:"else",52:"switch",53:"llaveAbre",56:"llaveCierra",57:"case",58:"break",59:"default",60:"incremento",61:"decremento",62:"print",63:"println",64:"mas",65:"menos",66:"multiplicacion",67:"division",68:"exponente",69:"modulo",70:"igualacion",71:"diferenciacion",72:"menorQue",73:"mayorQue",74:"mayorIgualQue",75:"menorIgualQue",76:"or",77:"and",78:"not",79:"toLower",80:"toUpper",81:"round",82:"length",83:"TypeOf",84:"to_String",85:"toCharArray",86:"cadena",87:"entero",88:"decimal",89:"caracter",90:"true",91:"false",92:"continue",93:"return",94:"int",95:"double",96:"boolean",97:"char",98:"string"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[4,2],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,2],[8,6],[8,7],[9,6],[9,7],[9,4],[9,5],[20,4],[20,2],[10,3],[11,2],[11,4],[11,2],[25,3],[25,1],[12,11],[12,16],[12,9],[31,3],[31,1],[32,2],[32,1],[32,2],[13,2],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,2],[13,2],[13,2],[13,2],[13,1],[13,1],[13,2],[13,0],[33,9],[45,1],[45,1],[46,1],[46,1],[46,1],[34,5],[35,7],[36,6],[50,2],[50,2],[50,0],[37,8],[54,5],[54,7],[54,4],[54,6],[54,0],[55,5],[55,3],[55,0],[39,3],[40,2],[41,2],[24,4],[24,3],[42,5],[43,5],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[27,1],[27,4],[27,4],[27,4],[27,4],[27,4],[27,4],[27,4],[27,4],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,2],[27,2],[27,2],[19,3],[19,2],[38,2],[38,2],[38,3],[38,2],[18,1],[18,1],[18,1],[18,1],[18,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 return ""; 
break;
case 3:
  if($$[$0]!=="") $$[$0-1].push($$[$0]); this.$=$$[$0-1]; 
break;
case 4:
 if(this.$!=="") this.$=[$$[$0]]; else this.$=[]; 
break;
case 5:
 console.error('Este es un error sintáctico'); let retorno = {value: null, type: Tipo.ERROR}; return retorno;
break;
case 6: case 7: case 11: case 37: case 38: case 39: case 40: case 41: case 47: case 48: case 52: case 53: case 54: case 55: case 56: case 60: case 61: case 96:
 this.$ = $$[$0]; 
break;
case 9: case 35: case 43: case 44: case 45: case 46:
 this.$ = $$[$0-1]; 
break;
case 12: case 49:

                        console.log("Error sintáctico en la línea: "+(this._$.first_line)+" en la columna: "+(this._$.first_column));
                        
break;
case 13:
 this.$ = new InsFuncion($$[$0-5], $$[$0], new Array(), $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 14:
 this.$ = new InsFuncion($$[$0-6], $$[$0], $$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 15:
 this.$ = new InsFuncion($$[$0-5], $$[$0], new Array(), Tipo.VOID, _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 16:
 this.$ = new InsFuncion($$[$0-6], $$[$0], $$[$0-4], Tipo.VOID, _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 17:
 this.$ = new InsFuncion($$[$0-3], $$[$0], new Array(), Tipo.VOID, _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 18:
 this.$ = new InsFuncion($$[$0-4], $$[$0], $$[$0-2], Tipo.VOID, _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 19:
 $$[$0-3].push(new Declaracion_Var([$$[$0]], null, $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)); this.$ = $$[$0-3];
break;
case 20:
 this.$ = [new Declaracion_Var([$$[$0]], null, $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column)]; 
break;
case 21:
 this.$ = new Run($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 22:
 this.$ = new Declaracion_Var($$[$0], null, $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 23:
 this.$ = new Declaracion_Var($$[$0-2], $$[$0], $$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 24: case 34:
console.log("Error sintáctico en la línea: "+(this._$.first_line)+" en la columna: "+(this._$.first_column));
break;
case 25: case 30:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 26: case 31: case 33:
 this.$ = [$$[$0]]; 
break;
case 32:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 42:
 this.$ = $$[$0];
break;
case 50:
 this.$ = null;
break;
case 51:
 this.$ = new For($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 57:
 this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 58:
 this.$ = new Do_While($$[$0-5], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 59:
 this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 62: case 71:
 this.$ = null; 
break;
case 63:
 this.$ = new Switch($$[$0-5], $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 64:
 $$[$0-4].push(new Case($$[$0-2], $$[$0], false, _$[$0-4].first_line, _$[$0-4].first_column, $$[$0-4].length)); this.$ = $$[$0-4]; 
break;
case 65:
 $$[$0-6].push(new Case($$[$0-4], $$[$0-2], true, _$[$0-6].first_line, _$[$0-6].first_column, $$[$0-6].length)); this.$ = $$[$0-6]; 
break;
case 66:
 this.$ = [new Case($$[$0-2], $$[$0], false, _$[$0-3].first_line, _$[$0-3].first_column, 0)]; 
break;
case 67:
 this.$ = [new Case($$[$0-4], $$[$0-2], true, _$[$0-5].first_line, _$[$0-5].first_column, 0)]; 
break;
case 68:
this.$ = null;
break;
case 69:
 this.$ = new Default($$[$0-2], true, _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 70:
 this.$ = new Default($$[$0], false, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 72:
 this.$ = new Asignacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 73:
 this.$ = new Incremento_Ins($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 74:
 this.$ = new Decremento_Ins($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 75:
 this.$ = new Llamada($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 76:
 this.$ = new Llamada($$[$0-2], new Array(), _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 77:
 this.$ = new Print($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 78:
 this.$ = new Println($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 79:
 this.$ = new Suma($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 80:
 this.$ = new Resta($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 81:
 this.$ = new Multiplicacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 82:
 this.$ = new Division($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 83:
 this.$ = new Potencia($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 84:
 this.$ = new Modulo($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 85:
 this.$ = new Negado($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 86:
 this.$ = $$[$0-1];
break;
case 87:
 this.$ = new Igualacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 88:
 this.$ = new Diferenciacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 89:
 this.$ = new Menor_Que($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 90:
 this.$ = new Mayor_Que($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 91:
 this.$ = new Mayor_Igual_Que($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 92:
 this.$ = new Menor_Igual_Que($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 93:
 this.$ = new Or($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 94:
 this.$ = new And($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 95:
 this.$ = new Not($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 97:
 this.$ = new Casteo($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 103:
 this.$ = new ToString($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 105:
 this.$ = new Literal($$[$0], Tipo.STRING, _$[$0].first_line, _$[$0].first_column); 
break;
case 106:
 this.$ = new Literal(parseInt($$[$0]), Tipo.INT, _$[$0].first_line, _$[$0].first_column); 
break;
case 107:
 this.$ = new Literal(Number($$[$0]), Tipo.DOUBLE, _$[$0].first_line, _$[$0].first_column); 
break;
case 108:
 this.$ = new Literal($$[$0], Tipo.CHAR, _$[$0].first_line, _$[$0].first_column); 
break;
case 109: case 110:
 this.$ = new Literal($$[$0], Tipo.BOOLEAN, _$[$0].first_line, _$[$0].first_column); 
break;
case 111:
 this.$ = new Identificador($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 112:
 this.$ = new Incremento_Exp($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 113:
 this.$ = new Decremento_Exp($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 114:

        console.log("Error sintáctico en la línea: "+(this._$.first_line)+" en la columna: "+(this._$.first_column));
        
break;
case 115:
 this.$ = new Bloque($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 116:
 this.$ = new Bloque(new Array(), _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 117:
 this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 118:
 this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 119:
 this.$ = new Return($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 120:
 this.$ = new Return(null, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 121:
 this.$ = Tipo.INT;
break;
case 122:
 this.$ = Tipo.DOUBLE; 
break;
case 123:
 this.$ = Tipo.BOOLEAN; 
break;
case 124:
 this.$ = Tipo.CHAR; 
break;
case 125:
 this.$ = Tipo.STRING; 
break;
}
},
table: [{2:[1,5],3:1,4:2,5:[1,3],6:4,8:6,9:7,10:8,11:9,12:10,13:11,14:$V0,18:14,23:$V1,24:24,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:23,42:25,43:26,44:$V2,47:$V3,48:$V4,49:$V5,52:$V6,58:$V7,62:$V8,63:$V9,92:$Va,93:$Vb,94:$Vc,95:$Vd,96:$Ve,97:$Vf,98:$Vg},{1:[3]},{2:[1,44],5:[1,42],6:43,8:6,9:7,10:8,11:9,12:10,13:11,14:$V0,18:14,23:$V1,24:24,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:23,42:25,43:26,44:$V2,47:$V3,48:$V4,49:$V5,52:$V6,58:$V7,62:$V8,63:$V9,92:$Va,93:$Vb,94:$Vc,95:$Vd,96:$Ve,97:$Vf,98:$Vg},{1:[2,2]},o($Vh,[2,4]),{7:[1,45]},o($Vh,[2,6]),o($Vh,[2,7]),o($Vh,[2,8]),{7:[1,46]},o($Vh,[2,10]),o($Vh,[2,11]),{15:[1,47],26:$Vi,60:$Vj,61:$Vk},{14:[1,52],24:51},{14:[1,54],25:53},o($Vl,[2,37]),o($Vl,[2,38]),o($Vl,[2,39]),o($Vl,[2,40]),o($Vl,[2,41]),o($Vl,[2,42]),{7:[1,55]},{7:[1,56]},{7:[1,57]},{7:[1,58]},o($Vl,[2,47]),o($Vl,[2,48]),o($Vm,[2,121]),o($Vm,[2,122]),o($Vm,[2,123]),o($Vm,[2,124]),o($Vm,[2,125]),{15:[1,59]},{15:[1,60]},{19:61,53:$Vn},{15:[1,63]},{15:[1,64]},{7:[1,65]},{7:[1,66]},{2:$Vo,7:[1,68],14:$Vp,15:$Vq,24:72,27:67,65:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF},{15:[1,88]},{15:[1,89]},{1:[2,1]},o($Vh,[2,3]),{7:[1,90]},o($VG,[2,5]),o($Vh,[2,9]),{2:$Vo,14:$Vp,15:$Vq,16:[1,91],18:94,20:92,24:72,27:95,31:93,65:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,94:$Vc,95:$Vd,96:$Ve,97:$Vf,98:$Vg},{2:$Vo,14:$Vp,15:$Vq,24:72,27:96,65:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF},o($VH,[2,73]),o($VH,[2,74]),{7:[1,97]},{15:$VI},{7:[2,22],22:[1,100],26:[1,99]},o($VJ,$VK,{28:[1,101]}),o($Vl,[2,43]),o($Vl,[2,44]),o($Vl,[2,45]),o($Vl,[2,46]),{2:[1,106],11:103,14:[1,107],18:105,39:104,45:102,94:$Vc,95:$Vd,96:$Ve,97:$Vf,98:$Vg},{2:$Vo,14:$Vp,15:$Vq,24:72,27:108,65:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF},{47:[1,109]},{2:$VL,11:114,12:115,13:112,14:$VM,18:14,24:24,32:110,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:23,42:25,43:26,44:$V2,47:$V3,48:$V4,49:$V5,52:$V6,56:[1,111],58:$V7,62:$V8,63:$V9,92:$Va,93:$Vb,94:$Vc,95:$Vd,96:$Ve,97:$Vf,98:$Vg},{2:$Vo,14:$Vp,15:$Vq,24:72,27:117,65:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF},{2:$Vo,14:$Vp,15:$Vq,24:72,27:118,65:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF},o($Vl,$VN),o($Vl,[2,118]),{7:[1,119],60:$VO,61:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11},o($Vl,[2,120]),{2:$Vo,14:$Vp,15:$Vq,24:72,27:136,65:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF},{2:$Vo,14:$Vp,15:$Vq,18:138,24:72,27:137,65:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF,94:$Vc,95:$Vd,96:$Ve,97:$Vf,98:$Vg},{2:$Vo,14:$Vp,15:$Vq,24:72,27:139,65:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF},o($V21,[2,96]),{15:[1,140]},{15:[1,141]},{15:[1,142]},{15:[1,143]},{15:[1,144]},{15:[1,145]},{15:[1,146]},o($V21,[2,105]),o($V21,[2,106]),o($V21,[2,107]),o($V21,[2,108]),o($V21,[2,109]),o($V21,[2,110]),o($V21,[2,111],{15:$VI}),{7:[1,147]},{2:$Vo,14:$Vp,15:$Vq,24:72,27:148,65:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF},{2:$Vo,14:$Vp,15:$Vq,24:72,27:149,65:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF},o($VG,[2,12]),{7:$V31,17:[1,150],19:151,53:$Vn},{16:[1,152],22:[1,153]},{16:[1,154],22:$V41},{14:[1,156]},o($V51,[2,31],{60:$VO,61:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11}),o($VH,[2,72],{60:$VO,61:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11}),o($Vh,[2,21]),{2:$Vo,14:$Vp,15:$Vq,16:[1,157],24:72,27:95,31:93,65:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF},{2:$Vo,14:$Vp,15:$Vq,24:72,27:158,65:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF},{14:[1,159]},{29:[1,160]},{7:[1,161]},{7:[2,52]},{7:[2,53]},{14:[1,162],25:53},{7:[1,163]},{26:$Vi},{16:[1,164],60:$VO,61:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11},{15:[1,165]},{2:$V61,11:114,12:115,13:167,14:$VM,18:14,24:24,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:23,42:25,43:26,44:$V2,47:$V3,48:$V4,49:$V5,52:$V6,56:[1,166],58:$V7,62:$V8,63:$V9,92:$Va,93:$Vb,94:$Vc,95:$Vd,96:$Ve,97:$Vf,98:$Vg},o($V71,[2,116]),o($V81,[2,33]),{7:[1,169]},{7:[1,170]},o($V81,[2,36]),{15:$VI,26:$Vi,60:$Vj,61:$Vk},{16:[1,171],60:$VO,61:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11},{16:[1,172],60:$VO,61:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11},o($Vl,[2,119]),{2:$Vo,14:$Vp,15:$Vq,24:72,27:173,65:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF},{2:$Vo,14:$Vp,15:$Vq,24:72,27:174,65:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF},{2:$Vo,14:$Vp,15:$Vq,24:72,27:175,65:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF},{2:$Vo,14:$Vp,15:$Vq,24:72,27:176,65:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF},{2:$Vo,14:$Vp,15:$Vq,24:72,27:177,65:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF},{2:$Vo,14:$Vp,15:$Vq,24:72,27:178,65:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF},{2:$Vo,14:$Vp,15:$Vq,24:72,27:179,65:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF},{2:$Vo,14:$Vp,15:$Vq,24:72,27:180,65:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF},{2:$Vo,14:$Vp,15:$Vq,24:72,27:181,65:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF},{2:$Vo,14:$Vp,15:$Vq,24:72,27:182,65:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF},{2:$Vo,14:$Vp,15:$Vq,24:72,27:183,65:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF},{2:$Vo,14:$Vp,15:$Vq,24:72,27:184,65:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF},{2:$Vo,14:$Vp,15:$Vq,24:72,27:185,65:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF},{2:$Vo,14:$Vp,15:$Vq,24:72,27:186,65:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF},o($V21,[2,112]),o($V21,[2,113]),o($V91,[2,85],{60:$VO,61:$VP}),{16:[1,187],60:$VO,61:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11},{16:[1,188]},o($Va1,[2,95],{60:$VO,61:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX,72:$VY,73:$VZ,74:$V_,75:$V$}),{2:$Vo,14:$Vp,15:$Vq,24:72,27:189,65:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF},{2:$Vo,14:$Vp,15:$Vq,24:72,27:190,65:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF},{2:$Vo,14:$Vp,15:$Vq,24:72,27:191,65:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF},{2:$Vo,14:$Vp,15:$Vq,24:72,27:192,65:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF},{2:$Vo,14:$Vp,15:$Vq,24:72,27:193,65:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF},{2:$Vo,14:$Vp,15:$Vq,24:72,27:194,65:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF},{2:$Vo,14:$Vp,15:$Vq,24:72,27:195,65:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF},o($V21,[2,114]),{16:[1,196],60:$VO,61:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11},{16:[1,197],60:$VO,61:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11},{18:198,21:[1,199],94:$Vc,95:$Vd,96:$Ve,97:$Vf,98:$Vg},o($Vh,[2,17]),{17:[1,200],19:201,53:$Vn},{18:202,94:$Vc,95:$Vd,96:$Ve,97:$Vf,98:$Vg},o($V21,[2,75]),{2:$Vo,14:$Vp,15:$Vq,24:72,27:203,65:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF},o($Vb1,[2,20]),o($V21,$V31),{7:[2,23],60:$VO,61:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11},o($VJ,[2,25]),{26:[1,204],28:[1,205]},{2:$Vo,14:$Vp,15:$Vq,24:72,27:206,65:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF},o($VJ,$VK),{7:[2,24]},{19:207,53:$Vn},{2:$Vo,14:$Vp,15:$Vq,24:72,27:208,65:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF},o($V71,[2,115]),o($V81,[2,32]),{7:[1,209]},o($Vc1,[2,34]),o($V81,[2,35]),{19:210,53:$Vn},{53:[1,211]},o($Vd1,[2,79],{60:$VO,61:$VP,66:$VS,67:$VT,68:$VU,69:$VV}),o($Vd1,[2,80],{60:$VO,61:$VP,66:$VS,67:$VT,68:$VU,69:$VV}),o($Ve1,[2,81],{60:$VO,61:$VP,68:$VU}),o($Ve1,[2,82],{60:$VO,61:$VP,68:$VU}),o($Ve1,[2,83],{60:$VO,61:$VP,68:$VU}),o($Ve1,[2,84],{60:$VO,61:$VP,68:$VU}),o($Vf1,[2,87],{60:$VO,61:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV}),o($Vf1,[2,88],{60:$VO,61:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV}),o($Vf1,[2,89],{60:$VO,61:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV}),o($Vf1,[2,90],{60:$VO,61:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV}),o($Vf1,[2,91],{60:$VO,61:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV}),o($Vf1,[2,92],{60:$VO,61:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV}),o([7,16,17,22,29,76],[2,93],{60:$VO,61:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,77:$V11}),o($Va1,[2,94],{60:$VO,61:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX,72:$VY,73:$VZ,74:$V_,75:$V$}),o($V21,[2,86]),{2:$Vo,14:$Vp,15:$Vq,24:72,27:212,65:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF},{16:[1,213],60:$VO,61:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11},{16:[1,214],60:$VO,61:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11},{16:[1,215],60:$VO,61:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11},{16:[1,216],60:$VO,61:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11},{16:[1,217],60:$VO,61:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11},{16:[1,218],60:$VO,61:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11},{16:[1,219],60:$VO,61:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11},{7:[1,220]},{7:[1,221]},{19:222,53:$Vn},{19:223,53:$Vn},{18:224,21:[1,225],94:$Vc,95:$Vd,96:$Ve,97:$Vf,98:$Vg},o($Vh,[2,18]),{14:[1,226]},o($V51,[2,30],{60:$VO,61:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11}),{28:[1,228],30:[1,227]},{29:[1,229]},{7:[1,230],60:$VO,61:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11},o($Vl,[2,57]),{16:[1,231],60:$VO,61:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11},o($Vc1,[2,49]),o($Vl,[2,62],{50:232,51:[1,233]}),o([56,59],[2,68],{54:234,57:[1,235]}),o($V91,[2,97],{60:$VO,61:$VP}),o($V21,[2,98]),o($V21,[2,99]),o($V21,[2,100]),o($V21,[2,101]),o($V21,[2,102]),o($V21,[2,103]),o($V21,[2,104]),o($Vl,[2,77]),o($Vl,[2,78]),o($Vh,[2,13]),o($Vh,[2,15]),{19:236,53:$Vn},{19:237,53:$Vn},o($Vb1,[2,19]),{18:238,94:$Vc,95:$Vd,96:$Ve,97:$Vf,98:$Vg},{2:$Vo,14:$Vp,15:$Vq,24:72,27:95,31:239,65:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF},{26:[1,240]},{14:[1,245],39:242,40:243,41:244,46:241},{7:[1,246]},o($Vl,[2,59]),{19:247,36:248,49:$V5,53:$Vn},{55:249,56:[2,71],57:[1,250],59:[1,251]},{2:$Vo,14:$Vp,15:$Vq,24:72,27:252,65:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF},o($Vh,[2,14]),o($Vh,[2,16]),{28:[1,253]},{22:$V41,29:[1,254]},{30:[1,255]},{16:[1,256]},{16:[2,54]},{16:[2,55]},{16:[2,56]},{26:$Vi,60:$Vj,61:$Vk},o($Vl,[2,58]),o($Vl,[2,60]),o($Vl,[2,61]),{56:[1,257]},{2:$Vo,14:$Vp,15:$Vq,24:72,27:258,65:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF},{17:[1,259]},{17:[1,260],60:$VO,61:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11},{2:$Vo,14:$Vp,15:$Vq,24:72,27:261,65:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF},{7:[1,262]},{18:263,94:$Vc,95:$Vd,96:$Ve,97:$Vf,98:$Vg},{19:264,53:$Vn},o($Vl,[2,63]),{17:[1,265],60:$VO,61:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11},{2:$VL,11:114,12:115,13:112,14:$VM,18:14,24:24,32:266,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:23,42:25,43:26,44:$V2,47:$V3,48:$V4,49:$V5,52:$V6,56:$Vg1,58:$V7,62:$V8,63:$V9,92:$Va,93:$Vb,94:$Vc,95:$Vd,96:$Ve,97:$Vf,98:$Vg},o($Vh1,$Vg1,{18:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:23,24:24,42:25,43:26,13:112,11:114,12:115,32:267,2:$VL,14:$VM,44:$V2,47:$V3,48:$V4,49:$V5,52:$V6,58:$V7,62:$V8,63:$V9,92:$Va,93:$Vb,94:$Vc,95:$Vd,96:$Ve,97:$Vf,98:$Vg}),{29:[1,268],60:$VO,61:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11},o($Vl,[2,29]),{28:[1,269]},o($Vl,[2,51]),o($Vh1,$Vg1,{18:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:23,24:24,42:25,43:26,13:112,11:114,12:115,32:270,2:$VL,14:$VM,44:$V2,47:$V3,48:$V4,49:$V5,52:$V6,58:$V7,62:$V8,63:$V9,92:$Va,93:$Vb,94:$Vc,95:$Vd,96:$Ve,97:$Vf,98:$Vg}),{2:$V61,11:114,12:115,13:167,14:$VM,18:14,24:24,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:23,42:25,43:26,44:$V2,47:$V3,48:$V4,49:$V5,52:$V6,56:[2,70],58:[1,271],62:$V8,63:$V9,92:$Va,93:$Vb,94:$Vc,95:$Vd,96:$Ve,97:$Vf,98:$Vg},o($Vh1,[2,66],{18:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:23,24:24,42:25,43:26,11:114,12:115,13:167,2:$V61,14:$VM,44:$V2,47:$V3,48:$V4,49:$V5,52:$V6,58:[1,272],62:$V8,63:$V9,92:$Va,93:$Vb,94:$Vc,95:$Vd,96:$Ve,97:$Vf,98:$Vg}),{7:[1,273]},{2:$Vo,14:$Vp,15:$Vq,24:72,27:274,65:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF},o($Vh1,[2,64],{18:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:23,24:24,42:25,43:26,11:114,12:115,13:167,2:$V61,14:$VM,44:$V2,47:$V3,48:$V4,49:$V5,52:$V6,58:[1,275],62:$V8,63:$V9,92:$Va,93:$Vb,94:$Vc,95:$Vd,96:$Ve,97:$Vf,98:$Vg}),{7:[1,276]},{7:[1,277]},o($Vl,[2,27]),{29:[1,278],60:$VO,61:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11},{7:[1,279]},o($Vi1,$VN,{56:[2,69]}),o($Vi1,$VN,{56:$Vj1,57:$Vj1,59:$Vj1}),{28:[1,280]},o($Vi1,$VN,{56:$Vk1,57:$Vk1,59:$Vk1}),{2:$Vo,14:$Vp,15:$Vq,24:72,27:281,65:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC,89:$VD,90:$VE,91:$VF},{29:[1,282],60:$VO,61:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,68:$VU,69:$VV,70:$VW,71:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,77:$V11},{7:[1,283]},o($Vl,[2,28])],
defaultActions: {3:[2,2],42:[2,1],103:[2,52],104:[2,53],163:[2,24],242:[2,54],243:[2,55],244:[2,56]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    var cadena = '';
    var errores = [];

	//Importanción de instrucciones
	const { Print } = require('../instrucciones/Print.ts');
        const { Println } = require('../instrucciones/Println.ts');
        const { Declaracion_Var } = require('../instrucciones/Declaracion_Var.ts');
        const { Asignacion } = require('../instrucciones/Asignacion.ts');
        const { Bloque } = require('../instrucciones/Bloque.ts');
        const { InsFuncion } = require('../instrucciones/InsFuncion.ts');
        const { Run } = require('../instrucciones/Run.ts');
                //Sentecias de transición
        const { Break } = require('../instrucciones/sentencias_de_transicion/Break.ts');
        const { Continue } = require('../instrucciones/sentencias_de_transicion/Continue.ts');
        const { Return } = require('../instrucciones/sentencias_de_transicion/Return.ts');
                //Instrucciones de sentencias de control
        const { If } = require('../instrucciones/sentencias_de_control/If.ts');
        const { Switch } = require('../instrucciones/sentencias_de_control/Switch.ts');
        const { Case } = require('../instrucciones/sentencias_de_control/Case.ts');
        const { Default } = require('../instrucciones/sentencias_de_control/Default.ts');
                //Instrucciones ciclicas
        const { For } = require('../instrucciones/sentencias_ciclicas/For.ts');
        const { While } = require('../instrucciones/sentencias_ciclicas/While.ts');
        const { Do_While }  = require('../instrucciones/sentencias_ciclicas/Do_While.ts');
                //Instrucciones aritmeticas
        const { Incremento_Ins } = require('../instrucciones/aritmetica/Incremento_Ins.ts');        
        const { Decremento_Ins } = require('../instrucciones/aritmetica/Decremento_Ins.ts');
        //Importación de expresiones
        const { Literal } = require('../expresiones/Literal.ts');
        const { Identificador } = require('../expresiones/Identificador.ts');
        const { Casteo } = require('../expresiones/Casteo.ts');
        const { Llamada } = require('../expresiones/Llamada.ts');
                //expresiones aritméticas
        const { Suma } = require('../expresiones/aritmetica/Suma.ts');
        const { Resta } = require('../expresiones/aritmetica/Resta.ts');
        const { Multiplicacion } = require('../expresiones/aritmetica/Multiplicacion.ts');
        const { Division } = require('../expresiones/aritmetica/Division.ts');
        const { Potencia } = require('../expresiones/aritmetica/Potencia.ts');
        const { Modulo } = require('../expresiones/aritmetica/Modulo.ts');
        const { Negado } = require('../expresiones/aritmetica/Negado.ts');
        const { Incremento_Exp } = require('../expresiones/aritmetica/Incremento_Exp.ts');
        const { Decremento_Exp } = require('../expresiones/aritmetica/Decremento_Exp.ts');
                //expresiones de operaciones relacionales
        const { Igualacion } = require('../expresiones/operaciones_relacionales/Igualacion.ts');
        const { Diferenciacion } = require('../expresiones/operaciones_relacionales/Diferenciacion.ts');
        const { Menor_Que } = require('../expresiones/operaciones_relacionales/Menor_Que.ts');
        const { Mayor_Que } = require('../expresiones/operaciones_relacionales/Mayor_Que.ts');
        const { Mayor_Igual_Que } = require('../expresiones/operaciones_relacionales/Mayor_Igual_Que.ts');
        const { Menor_Igual_Que } = require('../expresiones/operaciones_relacionales/Menor_Igual_Que.ts');
                //expresiones de operaciones lógicos
        const { Or } = require('../expresiones/operadores_logicos/Or.ts');
        const { And } = require('../expresiones/operadores_logicos/And.ts');
        const { Not } = require('../expresiones/operadores_logicos/Not.ts');
                //expresiones de funciones reservadas
        const { ToString } = require('../expresiones/funciones_reservadas/ToString.ts');
        //Importación de herramientas auxiliares
        const { Consola } = require('../consola_singleton/Consola.ts');
        const { Tipo } = require('../abstracto/Retorno.ts');
        const { Excepcion } = require('../errores/Excepcion.ts');
        const { Retorno } = require('../abstracto/Retorno.ts');
        var consola = Consola.getInstance();
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: cadena = ''; this.begin("string"); 
break;
case 1: cadena += yy_.yytext; 
break;
case 2: cadena += "\""; 
break;
case 3: cadena += "\n"; 
break;
case 4: cadena += " ";  
break;
case 5: cadena += "\t"; 
break;
case 6: cadena += "\\"; 
break;
case 7: cadena += "\'"; 
break;
case 8: cadena += "\r"; 
break;
case 9: yy_.yytext = cadena; this.popState(); return 86; 
break;
case 10:/* Espacio en blanco (los ignora) */
break;
case 11:// Comentario de una linea (los ignora)
break;
case 12:/* Comentario Multilinea (los ignora) */
break;
case 13:return 94
break;
case 14:return 95
break;
case 15:return 96
break;
case 16:return 97
break;
case 17:return 98
break;
case 18:return 90
break;
case 19:return 91
break;
case 20:return 30
break;
case 21:return 49
break;
case 22:return 51
break;
case 23:return 52
break;
case 24:return 57
break;
case 25:return 59
break;
case 26:return 63
break;
case 27:return 62
break;
case 28:return 58
break;
case 29:return 47
break;
case 30:return 44
break;
case 31:return 48
break;
case 32:return 92
break;
case 33:return 93
break;
case 34:return 21
break;
case 35:return 79
break;
case 36:return 80
break;
case 37:return 81
break;
case 38:return 82
break;
case 39:return 83
break;
case 40:return 84
break;
case 41:return 85
break;
case 42:return 23
break;
case 43:/*incremento*/     return 60      
break;
case 44:/*decremento*/     return 61
break;
case 45:/*mas*/             return 64
break;
case 46:/*menos*/           return 65
break;
case 47:/*multiplicacion*/  return 66
break;
case 48:/*division*/        return 67
break;
case 49:/*exponente*/      return 68
break;
case 50:/*Modulo*/          return 69    
break;
case 51:/*igualacion*/     return 70
break;
case 52:/*Diferenciacion*/ return 71
break;
case 53:/*menorIgualQue*/  return 75
break;
case 54:/*mayorIgualQue*/  return 74
break;
case 55:/*menorQue*/        return 72
break;
case 56:/*mayorQue*/        return 73    
break;
case 57:/*igual*/           return 26
break;
case 58:/*interrogacion*/   return 'interrogacion'
break;
case 59:/*dosPuntos*/       return 17
break;
case 60:/*puntoYcoma*/      return 7
break;
case 61:/*or*/             return 76
break;
case 62:/*and*/            return 77
break;
case 63:/*NOT*/             return 78
break;
case 64:/*ParentesisAbre*/  return 15
break;
case 65:/*ParentesisCierra*/return 16
break;
case 66:/*LlaveAbre*/       return 53
break;
case 67:/*LlaveCierra*/     return 56
break;
case 68:/*CorcheteAbre*/    return 28
break;
case 69:/*CorcheteCierra*/  return 29
break;
case 70:return 22
break;
case 71:/*Identificador*/ return 14
break;
case 72:return 89
break;
case 73:return 88
break;
case 74:return 87
break;
case 75:return 5
break;
case 76: console.log("Error léxico" + yy_.yytext + ", en la línea "+yy_.yylloc.first_line+", en la columna "+yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\s)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\')/i,/^(?:\\r)/i,/^(?:["])/i,/^(?:\s+)/i,/^(?:\/\/[^\r\n]*[\r|\n|\r\n]?)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:println\b)/i,/^(?:print\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:Round\b)/i,/^(?:length\b)/i,/^(?:Typeof\b)/i,/^(?:tostring\b)/i,/^(?:toCharArray\b)/i,/^(?:run\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:;)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:,)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:[']\\\\[']|[']\\"[']|[']\\'[']|[']\\n[']|[']\\t[']|[']\\r[']|['].?['])/i,/^(?:[0-9]+(\.[0-9]+)+\b)/i,/^(?:[0-9]+)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[1,2,3,4,5,6,7,8,9],"inclusive":false},"INITIAL":{"rules":[0,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}