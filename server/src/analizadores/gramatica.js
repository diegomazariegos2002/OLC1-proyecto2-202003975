/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,13],$V2=[1,31],$V3=[1,32],$V4=[1,33],$V5=[1,34],$V6=[1,35],$V7=[1,26],$V8=[1,27],$V9=[1,28],$Va=[1,29],$Vb=[1,30],$Vc=[1,38],$Vd=[2,5,14,24,45,49,52,60,61,90,91,92,93,94],$Ve=[1,41],$Vf=[1,42],$Vg=[1,43],$Vh=[2,5,14,16,23,24,45,49,52,55,56,57,60,61,90,91,92,93,94],$Vi=[14,15,16,29],$Vj=[1,76],$Vk=[1,62],$Vl=[1,60],$Vm=[1,59],$Vn=[1,61],$Vo=[1,63],$Vp=[1,64],$Vq=[1,65],$Vr=[1,66],$Vs=[1,67],$Vt=[1,68],$Vu=[1,69],$Vv=[1,70],$Vw=[1,71],$Vx=[1,72],$Vy=[1,73],$Vz=[1,74],$VA=[1,75],$VB=[7,16],$VC=[7,26,28],$VD=[2,25],$VE=[1,107],$VF=[1,108],$VG=[1,93],$VH=[1,94],$VI=[1,95],$VJ=[1,96],$VK=[1,97],$VL=[1,98],$VM=[1,99],$VN=[1,100],$VO=[1,101],$VP=[1,102],$VQ=[1,103],$VR=[1,104],$VS=[1,105],$VT=[1,106],$VU=[2,7,14,15,16,17,28,30,58,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89],$VV=[2,5,14,15,16,23,24,45,49,52,55,56,57,60,61,63,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94],$VW=[2,14,15,63,76,77,78,79,80,81,82,83,84,85,86,87,88,89],$VX=[2,7,14,15,16,17,28,30,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89],$VY=[2,7,14,15,16,17,28,30,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89],$VZ=[1,169],$V_=[2,7,14,15,16,17,28,30,62,63,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89],$V$=[2,7,14,15,16,17,28,30,62,63,64,65,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89],$V01=[2,7,14,15,16,17,28,30,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89],$V11=[1,179],$V21=[16,28,30],$V31=[1,195],$V41=[2,5,14,16,23,24,45,49,51,52,55,56,57,60,61,90,91,92,93,94],$V51=[2,14,16,23,45,49,52,55,56,57,60,61,90,91,92,93,94],$V61=[2,47],$V71=[23,55,56,57],$V81=[23,55,57];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"ENTRADAS":4,"EOF":5,"ENTRADA":6,"puntoYcoma":7,"FUNCION":8,"METODO":9,"RUN":10,"DECLARACION_VAR":11,"DECLARACION_VECT":12,"INSTRUCCION":13,"identificador":14,"parentesisAbre":15,"parentesisCierra":16,"dosPuntos":17,"TIPO":18,"INSTRUCCIONES":19,"LISTAPARAMETROS":20,"void":21,"llaveAbre":22,"llaveCierra":23,"run":24,"LISTA_VARIABLES":25,"igual":26,"EXPRESION":27,"coma":28,"corcheteAbre":29,"corcheteCierra":30,"new":31,"LISTA_VALORES":32,"VALOR":33,"FOR":34,"WHILE":35,"DO_WHILE":36,"IF":37,"SWITCH":38,"ASIGNACION":39,"INCREMENTO":40,"DECREMENTO":41,"LLAMADA":42,"PRINT":43,"PRINTLN":44,"for":45,"FOR_DECLARACION":46,"FOR_ITERADOR":47,"BLOQUE":48,"if":49,"CONTROL_ELSE":50,"else":51,"switch":52,"CASELIST":53,"DEFAULT":54,"case":55,"break":56,"default":57,"incremento":58,"decremento":59,"print":60,"println":61,"mas":62,"menos":63,"multiplicacion":64,"division":65,"exponente":66,"modulo":67,"igualacion":68,"diferenciacion":69,"menorQue":70,"mayorQue":71,"mayorIgualQue":72,"menorIgualQue":73,"or":74,"and":75,"not":76,"toLower":77,"toUpper":78,"round":79,"length":80,"TypeOf":81,"to_String":82,"toCharArray":83,"cadena":84,"entero":85,"decimal":86,"caracter":87,"true":88,"false":89,"int":90,"double":91,"boolean":92,"char":93,"string":94,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"puntoYcoma",14:"identificador",15:"parentesisAbre",16:"parentesisCierra",17:"dosPuntos",20:"LISTAPARAMETROS",21:"void",22:"llaveAbre",23:"llaveCierra",24:"run",26:"igual",28:"coma",29:"corcheteAbre",30:"corcheteCierra",31:"new",45:"for",49:"if",51:"else",52:"switch",55:"case",56:"break",57:"default",58:"incremento",59:"decremento",60:"print",61:"println",62:"mas",63:"menos",64:"multiplicacion",65:"division",66:"exponente",67:"modulo",68:"igualacion",69:"diferenciacion",70:"menorQue",71:"mayorQue",72:"mayorIgualQue",73:"menorIgualQue",74:"or",75:"and",76:"not",77:"toLower",78:"toUpper",79:"round",80:"length",81:"TypeOf",82:"to_String",83:"toCharArray",84:"cadena",85:"entero",86:"decimal",87:"caracter",88:"true",89:"false",90:"int",91:"double",92:"boolean",93:"char",94:"string"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[4,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[8,7],[8,8],[8,8],[8,9],[9,7],[9,8],[9,8],[9,9],[10,5],[10,6],[11,3],[11,5],[25,3],[25,1],[12,11],[12,16],[12,9],[32,3],[32,1],[19,2],[19,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,2],[13,2],[13,2],[13,1],[13,1],[13,1],[13,2],[13,0],[34,8],[46,1],[46,1],[47,1],[47,1],[47,1],[35,0],[36,0],[37,6],[50,2],[50,2],[50,0],[38,8],[53,5],[53,7],[53,4],[53,6],[53,0],[54,5],[54,3],[54,0],[39,3],[40,2],[41,2],[42,0],[43,5],[44,5],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[27,5],[27,4],[27,4],[27,4],[27,4],[27,4],[27,4],[27,4],[27,4],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,2],[27,2],[27,2],[48,3],[48,2],[33,1],[18,1],[18,1],[18,1],[18,1],[18,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 return ""; 
break;
case 3:
  if($$[$0]!=="") $$[$0-1].push($$[$0]); this.$=$$[$0-1]; 
break;
case 4:
 if(this.$!=="") this.$=[$$[$0]]; else this.$=[]; 
break;
case 5:
 console.error('Este es un error sintáctico'); let retorno = {value: null, type: Tipo.ERROR}; return retorno;
break;
case 11: case 35: case 38: case 49: case 50: case 51: case 52: case 53: case 57: case 58:
 this.$ = $$[$0]; 
break;
case 22:
 this.$ = new Declaracion_Var($$[$0-1], null, $$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 23:
 this.$ = new Declaracion_Var($$[$0-3], $$[$0-1], $$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 24:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 25: case 32:
 this.$ = [$$[$0]]; 
break;
case 31:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 40: case 41: case 42:
 this.$ = $$[$0-1]; 
break;
case 44:
this.$ = $$[$0];
break;
case 46:

                        console.log("Error sintáctico en la línea: "+(yylineno + 1));
                        var consola = Consola.getInstance();
                        const excepcion1 = new Excepcion("Error sintáctico", "El caracter no se esperaba en esta posición.", this._$.first_line, this._$.first_column+1);
                        consola.set_Error(excepcion1);
                        
break;
case 47:
 this.$ = null;
break;
case 48:
 this.$ = new For($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 56:
 this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 59: case 68:
 this.$ = null; 
break;
case 60:
 this.$ = new Switch($$[$0-5], $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 61:
 $$[$0-4].push(new Case($$[$0-2], $$[$0], false, _$[$0-4].first_line, _$[$0-4].first_column, $$[$0-4].length)); this.$ = $$[$0-4]; 
break;
case 62:
 $$[$0-6].push(new Case($$[$0-4], $$[$0-2], true, _$[$0-6].first_line, _$[$0-6].first_column, $$[$0-6].length)); this.$ = $$[$0-6]; 
break;
case 63:
 this.$ = [new Case($$[$0-2], $$[$0], false, _$[$0-3].first_line, _$[$0-3].first_column, 0)]; 
break;
case 64:
 this.$ = [new Case($$[$0-4], $$[$0-2], true, _$[$0-5].first_line, _$[$0-5].first_column, 0)]; 
break;
case 65:
this.$ = null;
break;
case 66:
 this.$ = new Default($$[$0-2], true, _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 67:
 this.$ = new Default($$[$0], false, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 69:
 this.$ = new Asignacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 70:
 this.$ = new Incremento_Ins($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 71:
 this.$ = new Decremento_Ins($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 73:
 this.$ = new Print($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 74:
 this.$ = new Println($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 75:
 this.$ = new Suma($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 76:
 this.$ = new Resta($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 77:
 this.$ = new Multiplicacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 78:
 this.$ = new Division($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 79:
 this.$ = new Potencia($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 80:
 this.$ = new Modulo($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 81:
 this.$ = new Negado($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 82:
 this.$ = $$[$0-1];
break;
case 83:
 this.$ = new Igualacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 84:
 this.$ = new Diferenciacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 85:
 this.$ = new Menor_Que($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 86:
 this.$ = new Mayor_Que($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 87:
 this.$ = new Mayor_Igual_Que($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 88:
 this.$ = new Menor_Igual_Que($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 89:
 this.$ = new Or($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 90:
 this.$ = new And($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 91:
 this.$ = new Not($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 93:
 this.$ = new Casteo($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 99:
 this.$ = new ToString($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 101:
 this.$ = new Literal($$[$0], Tipo.STRING, _$[$0].first_line, _$[$0].first_column); 
break;
case 102:
 this.$ = new Literal($$[$0], Tipo.INT, _$[$0].first_line, _$[$0].first_column); 
break;
case 103:
 this.$ = new Literal($$[$0], Tipo.DOUBLE, _$[$0].first_line, _$[$0].first_column); 
break;
case 104:
 this.$ = new Literal($$[$0], Tipo.CHAR, _$[$0].first_line, _$[$0].first_column); 
break;
case 105: case 106:
 this.$ = new Literal($$[$0], Tipo.BOOLEAN, _$[$0].first_line, _$[$0].first_column); 
break;
case 107:
 this.$ = new Identificador($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 108:
 this.$ = new Incremento_Exp($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 109:
 this.$ = new Decremento_Exp($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 110:

                        console.log("Error sintáctico en la línea: "+(yylineno + 1));
                        var consola = Consola.getInstance();
                        const excepcion2 = new Excepcion("Error sintáctico", "El caracter no se esperaba en esta posición.", this._$.first_line, this._$.first_column+1);
                        consola.set_Error(excepcion2);  
        
break;
case 111:
 this.$ = new Bloque($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 112:
 this.$ = new Bloque(new Array(), _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 114:
 this.$ = Tipo.INT;
break;
case 115:
 this.$ = Tipo.DOUBLE; 
break;
case 116:
 this.$ = Tipo.BOOLEAN; 
break;
case 117:
 this.$ = Tipo.CHAR; 
break;
case 118:
 this.$ = Tipo.STRING; 
break;
}
},
table: [{2:[1,5],3:1,4:2,5:[1,3],6:4,8:6,9:7,10:8,11:9,12:10,13:11,14:$V0,18:14,24:$V1,34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,45:$V2,49:$V3,52:$V4,60:$V5,61:$V6,90:$V7,91:$V8,92:$V9,93:$Va,94:$Vb},{1:[3]},{2:$Vc,5:[1,36],6:37,8:6,9:7,10:8,11:9,12:10,13:11,14:$V0,18:14,24:$V1,34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,45:$V2,49:$V3,52:$V4,60:$V5,61:$V6,90:$V7,91:$V8,92:$V9,93:$Va,94:$Vb},{1:[2,2]},o($Vd,[2,4]),{7:[1,39]},o($Vd,[2,6]),o($Vd,[2,7]),o($Vd,[2,8]),o($Vd,[2,9]),o($Vd,[2,10]),o($Vd,[2,11]),{15:[1,40],26:$Ve,58:$Vf,59:$Vg},{14:[1,44]},{14:[1,46],25:45},o($Vh,[2,35]),o($Vh,[2,36]),o($Vh,[2,37]),o($Vh,[2,38]),o($Vh,[2,39]),{7:[1,47]},{7:[1,48]},{7:[1,49]},o($Vh,[2,43]),o($Vh,[2,44]),o($Vh,[2,45]),o($Vi,[2,114]),o($Vi,[2,115]),o($Vi,[2,116]),o($Vi,[2,117]),o($Vi,[2,118]),{15:[1,50]},{15:[1,51]},{15:[1,52]},{15:[1,53]},{15:[1,54]},{1:[2,1]},o($Vd,[2,3]),{7:[1,55]},o($Vd,[2,5]),{16:[1,56],20:[1,57]},{2:$Vj,14:$Vk,15:$Vl,27:58,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA},o($VB,[2,70]),o($VB,[2,71]),{15:[1,77]},{7:[1,78],26:[1,79],28:[1,80]},o($VC,$VD,{29:[1,81]}),o($Vh,[2,40]),o($Vh,[2,41]),o($Vh,[2,42]),{11:83,14:[1,86],18:85,39:84,46:82,90:$V7,91:$V8,92:$V9,93:$Va,94:$Vb},{2:$Vj,14:$Vk,15:$Vl,27:87,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA},{2:$Vj,14:$Vk,15:$Vl,27:88,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA},{2:$Vj,14:$Vk,15:$Vl,27:89,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA},{2:$Vj,14:$Vk,15:$Vl,27:90,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA},o($Vh,[2,46]),{17:[1,91]},{16:[1,92]},o([2,7,14,15,16,76,77,78,79,80,81,82,83,84,85,86,87,88,89],[2,69],{58:$VE,59:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT}),{2:$Vj,14:$Vk,15:$Vl,27:109,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA},{2:$Vj,14:$Vk,15:$Vl,18:111,27:110,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA,90:$V7,91:$V8,92:$V9,93:$Va,94:$Vb},{2:$Vj,14:$Vk,15:$Vl,27:112,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA},o([2,7,14,16,17,28,30,58,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89],[2,107],{15:[1,113]}),{15:[1,114]},{15:[1,115]},{15:[1,116]},{15:[1,117]},{15:[1,118]},{15:[1,119]},{15:[1,120]},o($VU,[2,101]),o($VU,[2,102]),o($VU,[2,103]),o($VU,[2,104]),o($VU,[2,105]),o($VU,[2,106]),{7:[1,121]},{16:[1,122],20:[1,123]},o($VV,[2,22]),{2:$Vj,14:$Vk,15:$Vl,27:124,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA},{14:[1,125]},{30:[1,126]},{2:$Vj,14:$Vk,15:$Vl,27:127,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA},o($VW,[2,49]),o($VW,[2,50]),{14:[1,128],25:45},{26:$Ve},{16:[1,129],58:$VE,59:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT},{16:[1,130],58:$VE,59:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT},{16:[1,131],58:$VE,59:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT},{16:[1,132],58:$VE,59:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT},{18:133,21:[1,134],90:$V7,91:$V8,92:$V9,93:$Va,94:$Vb},{17:[1,135]},{2:$Vj,14:$Vk,15:$Vl,27:136,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA},{2:$Vj,14:$Vk,15:$Vl,27:137,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA},{2:$Vj,14:$Vk,15:$Vl,27:138,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA},{2:$Vj,14:$Vk,15:$Vl,27:139,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA},{2:$Vj,14:$Vk,15:$Vl,27:140,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA},{2:$Vj,14:$Vk,15:$Vl,27:141,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA},{2:$Vj,14:$Vk,15:$Vl,27:142,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA},{2:$Vj,14:$Vk,15:$Vl,27:143,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA},{2:$Vj,14:$Vk,15:$Vl,27:144,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA},{2:$Vj,14:$Vk,15:$Vl,27:145,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA},{2:$Vj,14:$Vk,15:$Vl,27:146,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA},{2:$Vj,14:$Vk,15:$Vl,27:147,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA},{2:$Vj,14:$Vk,15:$Vl,27:148,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA},{2:$Vj,14:$Vk,15:$Vl,27:149,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA},o($VU,[2,108]),o($VU,[2,109]),o($VX,[2,81],{58:$VE,59:$VF}),{16:[1,150],58:$VE,59:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT},{16:[1,151]},o($VY,[2,91],{58:$VE,59:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR}),{2:$Vj,14:$Vk,15:$Vl,27:154,32:152,33:153,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA},{2:$Vj,14:$Vk,15:$Vl,27:155,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA},{2:$Vj,14:$Vk,15:$Vl,27:156,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA},{2:$Vj,14:$Vk,15:$Vl,27:157,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA},{2:$Vj,14:$Vk,15:$Vl,27:158,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA},{2:$Vj,14:$Vk,15:$Vl,27:159,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA},{2:$Vj,14:$Vk,15:$Vl,27:160,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA},{2:$Vj,14:$Vk,15:$Vl,27:161,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA},o($VU,[2,110]),{7:[1,162]},{16:[1,163]},{7:[1,164],58:$VE,59:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT},o($VC,[2,24]),{26:[1,165],29:[1,166]},{7:[1,167],58:$VE,59:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT},o($VC,$VD),{22:$VZ,48:168},{22:[1,170]},{7:[1,171]},{7:[1,172]},{15:[1,173]},{22:[1,174]},{18:175,21:[1,176],90:$V7,91:$V8,92:$V9,93:$Va,94:$Vb},o($V_,[2,75],{58:$VE,59:$VF,64:$VI,65:$VJ,66:$VK,67:$VL}),o($V_,[2,76],{58:$VE,59:$VF,64:$VI,65:$VJ,66:$VK,67:$VL}),o($V$,[2,77],{58:$VE,59:$VF,66:$VK}),o($V$,[2,78],{58:$VE,59:$VF,66:$VK}),o($V$,[2,79],{58:$VE,59:$VF,66:$VK}),o($V$,[2,80],{58:$VE,59:$VF,66:$VK}),o($V01,[2,83],{58:$VE,59:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL}),o($V01,[2,84],{58:$VE,59:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL}),o($V01,[2,85],{58:$VE,59:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL}),o($V01,[2,86],{58:$VE,59:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL}),o($V01,[2,87],{58:$VE,59:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL}),o($V01,[2,88],{58:$VE,59:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL}),o([2,7,14,15,16,17,28,30,74,76,77,78,79,80,81,82,83,84,85,86,87,88,89],[2,89],{58:$VE,59:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,75:$VT}),o($VY,[2,90],{58:$VE,59:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR}),o($VU,[2,82]),{2:$Vj,14:$Vk,15:$Vl,27:177,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA},{16:[1,178],28:$V11},o($V21,[2,30]),o($V21,[2,113],{58:$VE,59:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT}),{16:[1,180],58:$VE,59:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT},{16:[1,181],58:$VE,59:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT},{16:[1,182],58:$VE,59:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT},{16:[1,183],58:$VE,59:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT},{16:[1,184],58:$VE,59:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT},{16:[1,185],58:$VE,59:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT},{16:[1,186],58:$VE,59:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT},o($Vd,[2,20]),{7:[1,187]},o($VV,[2,23]),{29:[1,189],31:[1,188]},{30:[1,190]},{14:$V31,39:192,40:193,41:194,47:191},o($Vh,[2,59],{50:196,51:[1,197]}),{2:$Vc,11:201,12:202,13:200,14:$V31,18:14,19:198,23:[1,199],34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,45:$V2,49:$V3,52:$V4,60:$V5,61:$V6,90:$V7,91:$V8,92:$V9,93:$Va,94:$Vb},o([23,57],[2,65],{53:203,55:[1,204]}),o($Vh,[2,73]),o($Vh,[2,74]),{2:$Vc,11:201,12:202,13:200,14:$V31,16:[1,205],18:14,19:206,34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,45:$V2,49:$V3,52:$V4,60:$V5,61:$V6,90:$V7,91:$V8,92:$V9,93:$Va,94:$Vb},{2:$Vc,11:201,12:202,13:200,14:$V31,18:14,19:208,23:[1,207],34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,45:$V2,49:$V3,52:$V4,60:$V5,61:$V6,90:$V7,91:$V8,92:$V9,93:$Va,94:$Vb},{15:[1,209]},{22:[1,210]},o($VX,[2,93],{58:$VE,59:$VF}),{7:[1,211]},{2:$Vj,14:$Vk,15:$Vl,27:154,33:212,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA},o($VU,[2,94]),o($VU,[2,95]),o($VU,[2,96]),o($VU,[2,97]),o($VU,[2,98]),o($VU,[2,99]),o($VU,[2,100]),o($Vd,[2,21]),{18:213,90:$V7,91:$V8,92:$V9,93:$Va,94:$Vb},{2:$Vj,14:$Vk,15:$Vl,27:154,32:214,33:153,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA},{26:[1,215]},{16:[1,216]},{16:[2,51]},{16:[2,52]},{16:[2,53]},{26:$Ve,58:$Vf,59:$Vg},o($Vh,[2,56]),{22:$VZ,37:218,48:217,49:$V3},{2:$Vc,11:201,12:202,13:220,14:$V31,18:14,23:[1,219],34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,45:$V2,49:$V3,52:$V4,60:$V5,61:$V6,90:$V7,91:$V8,92:$V9,93:$Va,94:$Vb},o($V41,[2,112]),o($V51,[2,32]),o($V51,[2,33]),o($V51,[2,34]),{23:[2,68],54:221,55:[1,222],57:[1,223]},{2:$Vj,14:$Vk,15:$Vl,27:224,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA},o($Vd,[2,12]),{2:$Vc,11:201,12:202,13:220,14:$V31,16:[1,225],18:14,34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,45:$V2,49:$V3,52:$V4,60:$V5,61:$V6,90:$V7,91:$V8,92:$V9,93:$Va,94:$Vb},o($Vd,[2,16]),{2:$Vc,11:201,12:202,13:220,14:$V31,18:14,23:[1,226],34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,45:$V2,49:$V3,52:$V4,60:$V5,61:$V6,90:$V7,91:$V8,92:$V9,93:$Va,94:$Vb},{2:$Vc,11:201,12:202,13:200,14:$V31,16:[1,227],18:14,19:228,34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,45:$V2,49:$V3,52:$V4,60:$V5,61:$V6,90:$V7,91:$V8,92:$V9,93:$Va,94:$Vb},{2:$Vc,11:201,12:202,13:200,14:$V31,18:14,19:230,23:[1,229],34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,45:$V2,49:$V3,52:$V4,60:$V5,61:$V6,90:$V7,91:$V8,92:$V9,93:$Va,94:$Vb},o($VU,[2,92]),o($V21,[2,29]),{29:[1,231]},{28:$V11,30:[1,232]},{31:[1,233]},{22:$VZ,48:234},o($Vh,[2,57]),o($Vh,[2,58]),o($V41,[2,111]),o($V51,[2,31]),{23:[1,235]},{2:$Vj,14:$Vk,15:$Vl,27:236,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA},{17:[1,237]},{17:[1,238],58:$VE,59:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT},o($Vd,[2,13]),o($Vd,[2,18]),o($Vd,[2,14]),{2:$Vc,11:201,12:202,13:220,14:$V31,16:[1,239],18:14,34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,45:$V2,49:$V3,52:$V4,60:$V5,61:$V6,90:$V7,91:$V8,92:$V9,93:$Va,94:$Vb},o($Vd,[2,17]),{2:$Vc,11:201,12:202,13:220,14:$V31,18:14,23:[1,240],34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,45:$V2,49:$V3,52:$V4,60:$V5,61:$V6,90:$V7,91:$V8,92:$V9,93:$Va,94:$Vb},{2:$Vj,14:$Vk,15:$Vl,27:241,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA},{7:[1,242]},{18:243,90:$V7,91:$V8,92:$V9,93:$Va,94:$Vb},o($Vh,[2,48]),o($Vh,[2,60]),{17:[1,244],58:$VE,59:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT},o([23,56],$V61,{18:14,34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,13:200,11:201,12:202,19:245,2:$Vc,14:$V31,45:$V2,49:$V3,52:$V4,60:$V5,61:$V6,90:$V7,91:$V8,92:$V9,93:$Va,94:$Vb}),o($V71,$V61,{18:14,34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,13:200,11:201,12:202,19:246,2:$Vc,14:$V31,45:$V2,49:$V3,52:$V4,60:$V5,61:$V6,90:$V7,91:$V8,92:$V9,93:$Va,94:$Vb}),o($Vd,[2,15]),o($Vd,[2,19]),{30:[1,247],58:$VE,59:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT},o($Vh,[2,28]),{29:[1,248]},o($V71,$V61,{18:14,34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,13:200,11:201,12:202,19:249,2:$Vc,14:$V31,45:$V2,49:$V3,52:$V4,60:$V5,61:$V6,90:$V7,91:$V8,92:$V9,93:$Va,94:$Vb}),{2:$Vc,11:201,12:202,13:220,14:$V31,18:14,23:[2,67],34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,45:$V2,49:$V3,52:$V4,56:[1,250],60:$V5,61:$V6,90:$V7,91:$V8,92:$V9,93:$Va,94:$Vb},o($V81,[2,63],{18:14,34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,11:201,12:202,13:220,2:$Vc,14:$V31,45:$V2,49:$V3,52:$V4,56:[1,251],60:$V5,61:$V6,90:$V7,91:$V8,92:$V9,93:$Va,94:$Vb}),{7:[1,252]},{2:$Vj,14:$Vk,15:$Vl,27:253,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA},o($V81,[2,61],{18:14,34:15,35:16,36:17,37:18,38:19,39:20,40:21,41:22,42:23,43:24,44:25,11:201,12:202,13:220,2:$Vc,14:$V31,45:$V2,49:$V3,52:$V4,56:[1,254],60:$V5,61:$V6,90:$V7,91:$V8,92:$V9,93:$Va,94:$Vb}),{7:[1,255]},{7:[1,256]},o($Vh,[2,26]),{30:[1,257],58:$VE,59:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT},{7:[1,258]},{23:[2,66]},o($V81,[2,64]),{29:[1,259]},o($V81,[2,62]),{2:$Vj,14:$Vk,15:$Vl,27:260,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA},{30:[1,261],58:$VE,59:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT},{7:[1,262]},o($Vh,[2,27])],
defaultActions: {3:[2,2],36:[2,1],192:[2,51],193:[2,52],194:[2,53],255:[2,66]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    var cadena = '';
    var errores = [];

	//Importanción de instrucciones
	const { Print } = require('../instrucciones/Print.ts');
        const { Println } = require('../instrucciones/Println.ts');
        const { Declaracion_Var } = require('../instrucciones/Declaracion_Var.ts');
        const { Asignacion } = require('../instrucciones/Asignacion.ts');
        const { Bloque } = require('../instrucciones/Bloque.ts');
                //Instrucciones de sentencias de control
        const { If } = require('../instrucciones/sentencias_de_control/If.ts');
        const { Switch } = require('../instrucciones/sentencias_de_control/Switch.ts');
        const { Case } = require('../instrucciones/sentencias_de_control/Case.ts');
        const { Default } = require('../instrucciones/sentencias_de_control/Default.ts');
                //Instrucciones ciclicas
        const { For } = require('../instrucciones/sentencias_ciclicas/For.ts');
                //Instrucciones aritmeticas
        const { Incremento_Ins } = require('../instrucciones/aritmetica/Incremento_Ins.ts');        
        const { Decremento_Ins } = require('../instrucciones/aritmetica/Decremento_Ins.ts');
        //Importación de expresiones
        const { Literal } = require('../expresiones/Literal.ts');
        const { Identificador } = require('../expresiones/Identificador.ts');
        const { Casteo } = require('../expresiones/Casteo.ts');
                //expresiones aritméticas
        const { Suma } = require('../expresiones/aritmetica/Suma.ts');
        const { Resta } = require('../expresiones/aritmetica/Resta.ts');
        const { Multiplicacion } = require('../expresiones/aritmetica/Multiplicacion.ts');
        const { Division } = require('../expresiones/aritmetica/Division.ts');
        const { Potencia } = require('../expresiones/aritmetica/Potencia.ts');
        const { Modulo } = require('../expresiones/aritmetica/Modulo.ts');
        const { Negado } = require('../expresiones/aritmetica/Negado.ts');
        const { Incremento_Exp } = require('../expresiones/aritmetica/Incremento_Exp.ts');
        const { Decremento_Exp } = require('../expresiones/aritmetica/Decremento_Exp.ts');
                //expresiones de operaciones relacionales
        const { Igualacion } = require('../expresiones/operaciones_relacionales/Igualacion.ts');
        const { Diferenciacion } = require('../expresiones/operaciones_relacionales/Diferenciacion.ts');
        const { Menor_Que } = require('../expresiones/operaciones_relacionales/Menor_Que.ts');
        const { Mayor_Que } = require('../expresiones/operaciones_relacionales/Mayor_Que.ts');
        const { Mayor_Igual_Que } = require('../expresiones/operaciones_relacionales/Mayor_Igual_Que.ts');
        const { Menor_Igual_Que } = require('../expresiones/operaciones_relacionales/Menor_Igual_Que.ts');
                //expresiones de operaciones lógicos
        const { Or } = require('../expresiones/operadores_logicos/Or.ts');
        const { And } = require('../expresiones/operadores_logicos/And.ts');
        const { Not } = require('../expresiones/operadores_logicos/Not.ts');
                //expresiones de funciones reservadas
        const { ToString } = require('../expresiones/funciones_reservadas/ToString.ts');
        //Importación de herramientas auxiliares
        const { Consola } = require('../consola_singleton/Consola.ts');
        const { Tipo } = require('../abstracto/Retorno.ts');
        const { Excepcion } = require('../errores/Excepcion.ts');
        const { Retorno } = require('../abstracto/Retorno.ts');
        var consola = Consola.getInstance();
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: cadena = ''; this.begin("string"); 
break;
case 1: cadena += yy_.yytext; 
break;
case 2: cadena += "\""; 
break;
case 3: cadena += "\n"; 
break;
case 4: cadena += " ";  
break;
case 5: cadena += "\t"; 
break;
case 6: cadena += "\\"; 
break;
case 7: cadena += "\'"; 
break;
case 8: cadena += "\r"; 
break;
case 9: yy_.yytext = cadena; this.popState(); return 84; 
break;
case 10:/* Espacio en blanco (los ignora) */
break;
case 11:// Comentario de una linea (los ignora)
break;
case 12:/* Comentario Multilinea (los ignora) */
break;
case 13:return 90
break;
case 14:return 91
break;
case 15:return 92
break;
case 16:return 93
break;
case 17:return 94
break;
case 18:return 88
break;
case 19:return 89
break;
case 20:return 31
break;
case 21:return 49
break;
case 22:return 51
break;
case 23:return 52
break;
case 24:return 55
break;
case 25:return 57
break;
case 26:return 61
break;
case 27:return 60
break;
case 28:return 56
break;
case 29:return 'while'
break;
case 30:return 45
break;
case 31:return 'do'
break;
case 32:return 'continue'
break;
case 33:return 'return'
break;
case 34:return 21
break;
case 35:return 77
break;
case 36:return 78
break;
case 37:return 79
break;
case 38:return 80
break;
case 39:return 81
break;
case 40:return 82
break;
case 41:return 83
break;
case 42:return 24
break;
case 43:/*incremento*/     return 58      
break;
case 44:/*decremento*/     return 59
break;
case 45:/*mas*/             return 62
break;
case 46:/*menos*/           return 63
break;
case 47:/*multiplicacion*/  return 64
break;
case 48:/*division*/        return 65
break;
case 49:/*exponente*/      return 66
break;
case 50:/*Modulo*/          return 67    
break;
case 51:/*igualacion*/     return 68
break;
case 52:/*Diferenciacion*/ return 69
break;
case 53:/*menorIgualQue*/  return 73
break;
case 54:/*mayorIgualQue*/  return 72
break;
case 55:/*menorQue*/        return 70
break;
case 56:/*mayorQue*/        return 71    
break;
case 57:/*igual*/           return 26
break;
case 58:/*interrogacion*/   return 'interrogacion'
break;
case 59:/*dosPuntos*/       return 17
break;
case 60:/*puntoYcoma*/      return 7
break;
case 61:/*or*/             return 74
break;
case 62:/*and*/            return 75
break;
case 63:/*NOT*/             return 76
break;
case 64:/*ParentesisAbre*/  return 15
break;
case 65:/*ParentesisCierra*/return 16
break;
case 66:/*LlaveAbre*/       return 22
break;
case 67:/*LlaveCierra*/     return 23
break;
case 68:/*CorcheteAbre*/    return 29
break;
case 69:/*CorcheteCierra*/  return 30
break;
case 70:return 28
break;
case 71:/*Identificador*/ return 14
break;
case 72:return 87
break;
case 73:return 86
break;
case 74:return 85
break;
case 75:return 5
break;
case 76: console.log("Error léxico") 
break;
}
},
rules: [/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\s)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\')/i,/^(?:\\r)/i,/^(?:["])/i,/^(?:\s+)/i,/^(?:\/\/[^\r\n]*[\r|\n|\r\n]?)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:println\b)/i,/^(?:print\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:Round\b)/i,/^(?:length\b)/i,/^(?:Typeof\b)/i,/^(?:tostring\b)/i,/^(?:toCharArray\b)/i,/^(?:run\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:;)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:,)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:[']\\\\[']|[']\\"[']|[']\\'[']|[']\\n[']|[']\\t[']|[']\\r[']|['].?['])/i,/^(?:[0-9]+(\.[0-9]+)+\b)/i,/^(?:[0-9]+)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[1,2,3,4,5,6,7,8,9],"inclusive":false},"INITIAL":{"rules":[0,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}